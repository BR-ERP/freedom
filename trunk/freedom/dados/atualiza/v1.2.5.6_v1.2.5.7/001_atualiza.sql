/* Server Version: LI-V6.3.4.4910 Firebird 1.5.  ODS Version: 10.1. */
SET NAMES NONE;

SET SQL DIALECT 3;

--CONNECT 'localhost:/opt/firebird/dados/desenv/freedom1.2.5.6.fdb' USER 'SYSDBA' PASSWORD '123654' ROLE 'ADM';

SET AUTODDL ON;

Update Rdb$Relation_Fields set Rdb$Description =
'Tipo de comissão:
F-Valor gerado no faturamento
R-Valor gerado no recebimento
E-Valor gerado no estorno de contas a receber
'
where Rdb$Relation_Name='VDCOMISSAO' and Rdb$Field_Name='TIPOCOMI';

/* Alter Field (Null / Not Null)... */
UPDATE RDB$RELATION_FIELDS SET RDB$NULL_FLAG = NULL WHERE RDB$FIELD_NAME='CODEMPPG' AND RDB$RELATION_NAME='VDPRECOPROD';

/* Alter Field (Null / Not Null)... */
UPDATE RDB$RELATION_FIELDS SET RDB$NULL_FLAG = NULL WHERE RDB$FIELD_NAME='CODFILIALPG' AND RDB$RELATION_NAME='VDPRECOPROD';

/* Alter Field (Null / Not Null)... */
UPDATE RDB$RELATION_FIELDS SET RDB$NULL_FLAG = NULL WHERE RDB$FIELD_NAME='CODPLANOPAG' AND RDB$RELATION_NAME='VDPRECOPROD';


ALTER TABLE EQITMODGRADE ADD DESCCOMPITMODG VARCHAR(50);

ALTER TABLE EQMODGRADE ADD DESCCOMPPRODMODG VARCHAR(50);

ALTER TABLE EQPRODUTO ADD CODEMPMG INTEGER;

ALTER TABLE EQPRODUTO ADD CODFILIALMG SMALLINT;

ALTER TABLE EQPRODUTO ADD CODMODG INTEGER;

ALTER TABLE SGPREFERE1 ADD CLASSPED02 VARCHAR(80);

ALTER TABLE SGPREFERE1 ADD CONSISTENDENTVD CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD USACLISEQ CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD BLOQDESCCOMPORC CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD BLOQPRECOORC CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD BLOQDESCCOMPVD CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD BLOQPRECOVD CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD DESABDESCFECHAVD CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD DESABDESCFECHAORC CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE SGPREFERE1 ADD PERMITBAIXAPARCJDM CHAR(1) DEFAULT 'N' NOT NULL;

ALTER TABLE VDPRECOPROD ADD ATIVOPRECOPROD CHAR(1) DEFAULT 'S' NOT NULL;

/* Create Procedure... */
SET TERM ^ ;

CREATE PROCEDURE FNESTORNACOMISSAOSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
CODREC INTEGER,
NPARCITREC SMALLINT)
 AS
 BEGIN EXIT; END
^


/*  Empty ATBUSCAPRECOSP for VDBUSCAPRECOSP(param list change)  */
/* AssignEmptyBody proc */
ALTER PROCEDURE ATBUSCAPRECOSP(ICODPROD INTEGER,
ICODCONV INTEGER,
ICODEMPCV INTEGER,
ICODFILIALCV SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(15,5))
 AS
 BEGIN EXIT; END
^

/*  Empty VDADICITORCRECMERCSP for VDBUSCAPRECOSP(param list change)  */
/* AssignEmptyBody proc */
ALTER PROCEDURE VDADICITORCRECMERCSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
TICKET INTEGER,
CODEMPOC INTEGER,
CODFILIALOC SMALLINT,
CODORC INTEGER,
COMPONENTES CHAR(1),
SERVICOS CHAR(1),
NOVOS CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter empty procedure VDBUSCAPRECOSP with new param-list */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
 BEGIN EXIT; END
^

/* Alter Procedure... */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
declare variable icodtab integer;
declare variable icodemptab integer;
declare variable icodfilialtab smallint;
declare variable icodclascli integer;
declare variable icodempclascli integer;
declare variable icodfilialclascli smallint;
declare variable percdesccli numeric(3,2);
declare variable desccli char(1);
declare variable arredpreco smallint;
declare variable codfilialpf integer;
declare variable centavos decimal(2,2);
declare variable precobase decimal(15,5);

begin
    -- Buscando código da filial de preferencias
    select icodfilial from sgretfilial(:icodemp,'SGFILIAL') into :codfilialpf;

    -- Buscando preferencias de arredondamento;
    select coalesce(arredpreco, 0)
    from sgprefere1 p1
    where p1.codemp=:icodemp and p1.codfilial=:codfilialpf
    into :arredpreco;

    -- Buscando tabela de preços do tipo de movimento;
    select codtab, codemptb, codfilialtb
    from eqtipomov
    where codtipomov=:icodtipomov and codemp=:icodemptm and codfilial=:icodfilialtm
    into :icodtab, :icodemptab, :icodfilialtab;


    -- Buscando informações do produto
    select coalesce(pd.desccli,'N'), coalesce(precobaseprod,0) from eqproduto pd
        where pd.codprod=:icodprod and pd.codemp=:icodemp and pd.codfilial=:icodfilial
        into :desccli, :precobase;

    -- Buscando informações do cliente
        
    select codclascli, codempcc, codfilialcc, coalesce(percdesccli,0) percdesccli
    from vdcliente
    where codcli=:icodcli and codemp=:icodempcl and codfilial=:icodfilialcl
    into :icodclascli, :icodempclascli, icodfilialclascli, :percdesccli;

     -- Buscando preço da tabela de preços utilizando todos os filtros exceto tabela de preços
    for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
    from vdprecoprod pp
    where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
    and pp.ativoprecoprod='S'
    and ( ( pp.codplanopag is null ) or (pp.codemppg=:icodemppg and pp.codfilialpg=:icodfilialpg and pp.codplanopag=:icodplanopag ) )
    and ( ( pp.codclascli is null) or (pp.codempcc=:icodempclascli and pp.codfilialcc=:icodfilialclascli and pp.codclascli=:icodclascli ) )
    order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
    into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
    begin
        --exception vdvendaex01 'Teste';

        if ( (:preco is not null) or (:preco <> 0) ) then
        begin
            --suspend;
            break;
        end
    end

    -- Buscando preço da tabela de preços específica
    if ( (:preco is null) or (:preco = 0) ) then
    begin

        for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
        from vdprecoprod pp
        where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
        and pp.ativoprecoprod='S'
        and pp.codemptb=:icodemptab and pp.codfilialtb=:icodfilialtab and pp.codtab=:icodtab
        order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
        into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
        begin
            --exception vdvendaex01 'Teste';

            if ( (:preco is not null) or (:preco <> 0) ) then
            begin
               --suspend;
               break;
            end
        end
    end

    --Se ainda não conseguiu pagar o preco, deve utilizar o preço base do produto aplicando o desconto especial do cliente se houver
    if ((preco is null) or (preco = 0)) then
    begin
 		preco = precobase;
    end

    -- Verifica se o cliente possui desconto especial e o produto permite este desconto...
    if( percdesccli >0 and 'S' = :desccli ) then
    begin
         preco = :preco - (:preco * (:percdesccli / 100)) ;
    end

    if( :arredpreco > 0 ) then
    begin

        -- capturando valor dos centavos
        centavos = ( cast(:preco as decimal(15,2)) - truncate(preco) ) * 10;

        -- se o valor em centavos é maior ou igual ao parametro de arredondamento (arredondar para cima)
        if(:centavos >= :arredpreco) then
        begin
            preco = truncate(preco) + 1;
        end
        else
        begin
            preco = truncate(preco);
        end

    end

    suspend;

end
^

/* Alter (ATBUSCAPRECOSP) */
ALTER PROCEDURE ATBUSCAPRECOSP(ICODPROD INTEGER,
ICODCONV INTEGER,
ICODEMPCV INTEGER,
ICODFILIALCV SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(15,5))
 AS
DECLARE VARIABLE iCodTipoMov INTEGER;
  DECLARE VARIABLE iCodEmpTM INTEGER;
  DECLARE VARIABLE iCodFilialTM INTEGER;
  DECLARE VARIABLE iCodCli INTEGER;
  DECLARE VARIABLE iCodEmpCli INTEGER;
  DECLARE VARIABLE iCodFilialCli INTEGER;
BEGIN
  SELECT CODTIPOMOV2,CODEMPT2,CODFILIALT2 FROM SGPREFERE1 WHERE CODEMP=:ICODEMP
         AND CODFILIAL=:ICODFILIAL INTO iCodTipoMov,iCodEmpTM,iCodFilialTM;
  SELECT CODCLI,CODEMPCL,CODFILIALCL FROM ATCONVENIADO WHERE CODCONV=:ICODCONV
         AND CODEMP=:ICODEMPCV AND CODFILIAL=:ICODFILIALCV INTO iCodCli,iCodEmpCli,iCodFilialCli;

  SELECT PRECO FROM VDBUSCAPRECOSP(:ICODPROD,:iCodCli,:iCodEmpCli,:iCodFilialCli,:ICODPLANOPAG,:ICODEMPPG,
    :ICODFILIALPG,:iCodTipoMov,:iCodEmpTM,:iCodFilialTM,:ICODEMP,:ICODFILIAL) INTO PRECO;

  SUSPEND;
END
^

/* Alter (EQADICPRODUTOSP) */
ALTER PROCEDURE EQADICPRODUTOSP(CODEMPPD INTEGER,
CODFILIALPD INTEGER,
CODPROD INTEGER,
DESCPROD VARCHAR(100),
DESCAUXPROD VARCHAR(40),
REFPROD VARCHAR(20),
CODFABPROD CHAR(15),
CODBARPROD CHAR(13),
CODEMPMG INTEGER,
CODFILIALMG SMALLINT,
CODMODG INTEGER,
DESCCOMPPROD VARCHAR(500))
 AS
declare variable codnovo integer;
declare variable codalmox integer;
declare variable codempax integer;
declare variable codfilialax integer;
declare variable codmoeda char(4);
declare variable codempma integer;
declare variable codfilialma integer;
declare variable codunid varchar(20);
declare variable codempud integer;
declare variable codfilialud integer;
declare variable codfisc char(13);
declare variable codempfc integer;
declare variable codfilialfc integer;
declare variable codmarca char(6);
declare variable codempmc integer;
declare variable codfilialmc integer;
declare variable codgrup char(10);
declare variable codempgp integer;
declare variable codfilialgp integer;
declare variable tipoprod varchar(2);
declare variable cvprod char(1);
declare variable cloteprod char(1);
declare variable comisprod numeric(15,5);
declare variable pesoliqprod numeric(15,5);
declare variable pesobrutprod numeric(15,5);
declare variable qtdminprod numeric(15,5);
declare variable qtdmaxprod numeric(15,5);
declare variable precobaseprod numeric(15,5);
BEGIN
  BEGIN
    BEGIN
      codnovo = CAST(REFPROD AS INTEGER);
/*Se não conseguir converter para int causa uma excessão e entra neste bloco: */
      WHEN ANY DO
      BEGIN
        SELECT MAX(CODPROD) FROM EQPRODUTO
           WHERE CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD INTO :codnovo;
        if (codnovo is null) then
           codnovo = 0;
        codnovo = codnovo + 1;
      END
    END
    SELECT CODALMOX,CODEMPAX,CODFILIALAX,CODMOEDA,CODEMPMA,CODFILIALMA,CODUNID
           ,CODEMPUD,CODFILIALUD,CODFISC,CODEMPFC,CODFILIALFC,CODMARCA
           ,CODEMPMC,CODFILIALMC,CODGRUP,CODEMPGP,CODFILIALGP,TIPOPROD
           ,CVPROD,CLOTEPROD,COMISPROD,PESOLIQPROD,PESOBRUTPROD,QTDMINPROD
           ,QTDMAXPROD,PRECOBASEPROD
           FROM EQPRODUTO WHERE CODPROD=:Codprod
           AND CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD
           INTO
           :CODALMOX,:CODEMPAX,:CODFILIALAX,:CODMOEDA,:CODEMPMA,:CODFILIALMA,:CODUNID
           ,:CODEMPUD,:CODFILIALUD,:CODFISC,:CODEMPFC,:CODFILIALFC,:CODMARCA
           ,:CODEMPMC,:CODFILIALMC,:CODGRUP,:CODEMPGP,:CODFILIALGP,:TIPOPROD
           ,:CVPROD,:CLOTEPROD,:COMISPROD,:PESOLIQPROD,:PESOBRUTPROD,:QTDMINPROD,
           :QTDMAXPROD,:PRECOBASEPROD;
    INSERT INTO EQPRODUTO (CODEMP,CODFILIAL,CODPROD,REFPROD,CODALMOX,CODEMPAX,CODFILIALAX,CODMOEDA,CODEMPMA
          ,CODFILIALMA,CODUNID,CODEMPUD,CODFILIALUD,CODFISC,CODEMPFC,CODFILIALFC,CODMARCA,CODEMPMC,CODFILIALMC
          ,CODGRUP,CODEMPGP,CODFILIALGP,TIPOPROD,CVPROD,DESCPROD,DESCAUXPROD,CLOTEPROD,CODBARPROD,CODFABPROD
          ,COMISPROD,PESOLIQPROD,PESOBRUTPROD,QTDMINPROD,QTDMAXPROD,PRECOBASEPROD
          ,CODEMPOG, CODFILIALOG, CODPRODOG, CODEMPMG, CODFILIALMG, CODMODG, DESCCOMPPROD)
           VALUES (
                  :CODEMPPD,:CODFILIALPD,:Codnovo,:RefProd,:CODALMOX,:CODEMPAX,:CODFILIALAX,:CODMOEDA,:CODEMPMA,:CODFILIALMA
                  ,:CODUNID,:CODEMPUD,:CODFILIALUD,:CODFISC,:CODEMPFC,:CODFILIALFC,:CODMARCA,:CODEMPMC,:CODFILIALMC
                  ,:CODGRUP,:CODEMPGP,:CODFILIALGP,:TIPOPROD,:CVPROD,:Descprod,:DescAuxprod,:CLOTEPROD,:Codbarprod,:Codfabprod
                  ,:COMISPROD,:PESOLIQPROD,:PESOBRUTPROD,:QTDMINPROD,:QTDMAXPROD,:PRECOBASEPROD
                  ,:CODEMPPD, :CODFILIALPD, :CODPROD, :CODEMPMG, :CODFILIALMG, :CODMODG, :DESCCOMPPROD
           );
    INSERT INTO VDPRECOPROD (CODEMP,CODFILIAL,CODPROD,CODPRECOPROD,CODCLASCLI,CODEMPCC,CODFILIALCC,CODTAB,CODEMPTB,CODFILIALTB,CODPLANOPAG,CODEMPPG,CODFILIALPG,PRECOPROD)
           SELECT :CODEMPPD,:CODFILIALPD,:Codnovo,CODPRECOPROD,CODCLASCLI,CODEMPCC,CODFILIALCC,
                  CODTAB,CODEMPTB,CODFILIALTB,CODPLANOPAG,CODEMPPG,CODFILIALPG,PRECOPROD FROM VDPRECOPROD WHERE CODPROD=:Codprod
                  AND CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD;
  END
--  SUSPEND;
END
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODISP for: EQMOVPRODCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODPRCSLDSP for: EQMOVPRODCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODPRCSLDSP(SCODFILIAL SMALLINT,
ICODMOVPROD INTEGER,
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
DDTMOVPROD DATE,
DDTMOVPRODPRC DATE,
NSLDMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPRODAX NUMERIC(15,5),
NCUSTOMPMMOVPRODAX NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1))
 RETURNS(NSLDPRC NUMERIC(15,5),
NCUSTOMPMPRC NUMERIC(15,5),
NSLDPRCAX NUMERIC(15,5),
NCUSTOMPMPRCAX NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODUSP for: EQMOVPRODCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter (EQMOVPRODCSLDSP) */
ALTER PROCEDURE EQMOVPRODCSLDSP(ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPROD NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 RETURNS(NCUSTOMPM NUMERIC(15,5),
NSALDO NUMERIC(15,5),
CESTOQMOVPROD CHAR(1),
CTIPOMOVPROD CHAR(1),
SOPERADOR SMALLINT)
 AS
begin
  /* Procedure que retorna o cálculo de custo e saldo */
  NCUSTOMPM = 0;
  NSALDO = 0;
  SELECT CESTIPOMOV, SOPERADOR
     FROM EQMOVPRODCKTMSP( :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV, :ESTOQTIPOMOVPD)
     INTO :CTIPOMOVPROD, :SOPERADOR;
  if (SOPERADOR=0) then
  begin
     CESTOQMOVPROD = 'N';
     NSALDO = NSLDMOVPROD;
  end
  else
  begin  /* verifica se é para controlar estoque */
     CESTOQMOVPROD = 'S';
     NSALDO = NSLDMOVPROD + CAST ( (NQTDMOVPROD * SOPERADOR) AS NUMERIC(15, 5) );
  end
  if ( (NSALDO >= NSLDMOVPROD) AND (NSALDO > 0) AND (SOPERADOR>0) ) then
  begin
    if ( (NSLDMOVPROD * NCUSTOMPMMOVPROD)  <= 0) then
       NCUSTOMPM = NPRECOMOVPROD;
    else
        NCUSTOMPM = ( cast(NSLDMOVPROD * NCUSTOMPMMOVPROD as numeric(15,5) ) +
        cast(NQTDMOVPROD * NPRECOMOVPROD as numeric(15,5)) ) / (NSLDMOVPROD + NQTDMOVPROD) ;
  end
  else
      NCUSTOMPM = NCUSTOMPMMOVPROD;

  suspend;
end
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODIUDSP for: EQMOVPRODISP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter (EQMOVPRODISP) */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable cestoqmovprod char(1);
declare variable ctipomovprod char(1);
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable soperador smallint;
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de inserção na tabela eqmovprod */

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX FROM EQMOVPRODSLDSP(null, null, null, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NPRECOMOVPROD, :NPRECOMOVPROD,
     :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX )
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

  /* Verifica se haverá mudança de saldo*/
  SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD, CTIPOMOVPROD, SOPERADOR FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
      :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :SOPERADOR;

  if (CMULTIALMOX='N') then
  begin
     NSLDMOVPRODAX = NSLDMOVPROD;
     NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
  end
  else
  begin
      SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
          :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
        INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
  end

  SELECT SCODFILIAL, ICODMOVPROD FROM EQMOVPRODSEQSP(:ICODEMPPD)
     INTO :SCODFILIAL, :ICODMOVPROD;  /* encontra o próximo código e a filial*/

   INSERT INTO EQMOVPROD ( CODEMP, CODFILIAL, CODMOVPROD,
      CODEMPPD, CODFILIALPD , CODPROD , CODEMPLE ,
      CODFILIALLE , CODLOTE , CODEMPTM, CODFILIALTM,
      CODTIPOMOV, CODEMPIV , CODFILIALIV , CODINVPROD ,
      CODEMPCP , CODFILIALCP , CODCOMPRA , CODITCOMPRA , CODEMPVD ,
      CODFILIALVD , TIPOVENDA , CODVENDA , CODITVENDA , CODEMPRM ,
      CODFILIALRM , CODRMA , CODITRMA ,
      CODEMPOP, CODFILIALOP, CODOP, SEQOP, SEQENTOP,
      CODEMPNT , CODFILIALNT ,
      CODNAT , DTMOVPROD , DOCMOVPROD , FLAG , QTDMOVPROD ,
      PRECOMOVPROD, ESTOQMOVPROD, TIPOMOVPROD, SLDMOVPROD, CUSTOMPMMOVPROD,
      SLDMOVPRODAX, CUSTOMPMMOVPRODAX, CODEMPAX, CODFILIALAX, CODALMOX, seqsubprod )
   VALUES ( :ICODEMPPD, :SCODFILIAL, :ICODMOVPROD,
    :ICODEMPPD , :SCODFILIALPD , :ICODPROD , :ICODEMPLE ,
    :SCODFILIALLE , :CCODLOTE , :ICODEMPTM, :SCODFILIALTM,
    :ICODTIPOMOV, :ICODEMPIV , :SCODFILIALIV ,
    :ICODINVPROD , :ICODEMPCP , :SCODFILIALCP , :ICODCOMPRA ,
    :SCODITCOMPRA , :ICODEMPVD , :SCODFILIALVD , :CTIPOVENDA ,
    :ICODVENDA , :SCODITVENDA , :ICODEMPRM , :SCODFILIALRM ,
    :ICODRMA , :SCODITRMA , :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop,
    :ICODEMPNT , :SCODFILIALNT , :CCODNAT ,
    :DDTMOVPROD , :IDOCMOVPROD , :CFLAG , :NQTDMOVPROD ,
    :NPRECOMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
    :NSLDMOVPRODAX,  :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :seqsubprod );

  /* REPROCESSAR ESTOQUE */

  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
     :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
     :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

 /* ATUALIZA O CUSTO NO CADASTRO DE PRODUTOS
   EXECUTE PROCEDURE EQMOVPRODATCUSTSP(:SOPERADOR, :ICODEMPPD, :SCODFILIAL,
    :ICODMOVPROD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMMOVPROD); 
 */


  suspend;
end
^

/* Alter (EQMOVPRODIUDSP) */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable cmultialmox char(1);
begin
  /* Procedure que controle INSERT, UPDATE E DELETE da tabela eqmovprod */

  /* Linha incluida para passar como parâmetro se é multi almoxarifado
      Como o objetivo de evitar I/O
  */
  SELECT CMULTIALMOX FROM SGRETMULTIALMOXSP(:ICODEMPPD) INTO :CMULTIALMOX;
  
  if (CIUD='I') then /* SE FOR INSERT */
     execute procedure EQMOVPRODISP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod, :estoqtipomovpd);
  else if (CIUD='U') then
     execute procedure EQMOVPRODUSP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX,:seqsubprod, :estoqtipomovpd);
  else if (CIUD='D') then
     execute procedure EQMOVPRODDSP( ICODEMPPD, SCODFILIALPD, ICODPROD, ICODEMPIV,
         SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA, SCODITCOMPRA,
         ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         DDTMOVPROD, ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod );
--  suspend;
end
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODDSP for: EQMOVPRODPRCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
 BEGIN EXIT; END
^

/* Alter (EQMOVPRODPRCSLDSP) */
ALTER PROCEDURE EQMOVPRODPRCSLDSP(SCODFILIAL SMALLINT,
ICODMOVPROD INTEGER,
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
DDTMOVPROD DATE,
DDTMOVPRODPRC DATE,
NSLDMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPRODAX NUMERIC(15,5),
NCUSTOMPMMOVPRODAX NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1))
 RETURNS(NSLDPRC NUMERIC(15,5),
NCUSTOMPMPRC NUMERIC(15,5),
NSLDPRCAX NUMERIC(15,5),
NCUSTOMPMPRCAX NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable nqtdmovprod numeric(15,5);
declare variable nprecomovprod numeric(15,5);
declare variable icodmovprodprc integer;
declare variable cestoqmovprod char(1);
declare variable icodempaxprc integer;
declare variable scodfilialaxprc smallint;
declare variable icodalmoxprc integer;
begin
  /* Procedure de processamento de estoque */
  FOR SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV ,
    MP.QTDMOVPROD, MP.PRECOMOVPROD , MP.CODMOVPROD,
    MP.CODEMPAX, MP.CODFILIALAX, MP.CODALMOX, MP.ESTOQMOVPROD
    FROM EQMOVPROD MP
    WHERE MP.CODEMPPD=:ICODEMPPD AND MP.CODFILIALPD=:SCODFILIALPD AND
       MP.CODPROD=:ICODPROD AND MP.CODEMP=:ICODEMPPD AND MP.CODFILIAL=:SCODFILIAL AND
       ( (MP.DTMOVPROD = :DDTMOVPROD AND MP.CODMOVPROD > :ICODMOVPROD) OR
         (MP.DTMOVPROD>:DDTMOVPROD) ) AND  /* ALTEREI AQUI */
       ( (:DDTMOVPRODPRC IS NULL /* AND MP.CODMOVPROD!=:ICODMOVPROD */) OR
         (MP.DTMOVPROD = :DDTMOVPRODPRC AND MP.CODMOVPROD < :ICODMOVPROD) OR
         (MP.DTMOVPROD < :DDTMOVPRODPRC) )
    ORDER BY MP.DTMOVPROD, MP.CODMOVPROD
    INTO :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
     :NQTDMOVPROD, :NPRECOMOVPROD, :ICODMOVPRODPRC,
     :ICODEMPAXPRC, :SCODFILIALAXPRC, :ICODALMOXPRC, :ESTOQTIPOMOVPD DO
  BEGIN
      SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
        :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD;
      if (CMULTIALMOX='N') then /* Se não for multi almoxarifado*/
      begin
         NSLDMOVPRODAX = NSLDMOVPROD;
         NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
         UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else if (ICODEMPAX=ICODEMPAXPRC AND SCODFILIALAX=SCODFILIALAXPRC AND
          ICODALMOX=ICODALMOXPRC) then
          /* Se for multi almoxarifado e o código do almoxarifado for o mesmo*/
      begin
        SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
            :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
            INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else /* Se for multi almoxarifado não atualiza almoxarifado diferente */
      begin
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      NSLDPRC = NSLDMOVPROD;
      NCUSTOMPMPRC = NCUSTOMPMMOVPROD;
      NSLDPRCAX = NSLDMOVPRODAX;
      NCUSTOMPMPRCAX = NCUSTOMPMMOVPRODAX;
  END
  suspend;
end
^

/* Alter (EQMOVPRODUSP) */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldprc numeric(15,5);
declare variable ncustompmprc numeric(15,5);
declare variable nsldprcax numeric(15,5);
declare variable ncustompmprcax numeric(15,5);
declare variable nsldlc numeric(15,5);
declare variable ncustompmlc numeric(15,5);
declare variable nsldlcax numeric(15,5);
declare variable ncustompmlcax numeric(15,5);
declare variable ddtmovprodold date;
declare variable nprecomovprodold numeric(15,5);
declare variable nqtdmovprodold numeric(15,5);
declare variable icodemptmold integer;
declare variable scodfilialtmold smallint;
declare variable icodtipomovold integer;
declare variable calttm char(1);
declare variable ddtprc date;
declare variable ddtprcate date;
declare variable cestoqmovprod char(1);
begin
  /* Procedure de atualização da tabela eqmovprod */

  DDTPRCATE = NULL; /* Até onde deve ser processando o estoque */
 /* localiza movprod */

-- execute procedure sgdebugsp('antes da atualização...','no inicio');

  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
    FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
      :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
      :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM,
      :ICODRMA, :SCODITRMA, :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

--  traz valores antigos

  SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV, MP.DTMOVPROD,
       MP.PRECOMOVPROD, MP.QTDMOVPROD  FROM EQMOVPROD MP
     WHERE MP.CODEMP=:ICODEMP AND MP.CODFILIAL=:SCODFILIAL AND MP.CODMOVPROD=:ICODMOVPROD
     INTO :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD, :DDTMOVPRODOLD,
       :NPRECOMOVPRODOLD, :NQTDMOVPRODOLD;

   /* abaixo verificação se a alteração de tipo de movimento mexe no estoque */
   SELECT CALTTM FROM EQMOVPRODCKUTMSP(:ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
      :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD) INTO :CALTTM;

   /* verifica se há relevância para reprocessamento */
   if ( (DDTMOVPROD!=DDTMOVPRODOLD) OR (CALTTM='S') OR
        (NPRECOMOVPROD!=NPRECOMOVPRODOLD) OR (NQTDMOVPROD!=NQTDMOVPRODOLD) ) then
   begin

   -- execute procedure sgdebugsp('entrou no if','1');


      if ( DDTMOVPRODOLD IS NULL) then
         DDTMOVPRODOLD = DDTMOVPROD; /* garantir que a data antiga não e nula; */
      /* verifica qual data é menor para reprocessamento */
      if ( DDTMOVPROD<=DDTMOVPRODOLD ) then
      begin

     -- execute procedure sgdebugsp('entrou no if','2');

          DDTPRC = DDTMOVPROD;
          if (DDTMOVPROD=DDTMOVPRODOLD) then
             DDTPRCATE = null;
          else
             DDTPRCATE = DDTMOVPRODOLD;
/*          verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, :NPRECOMOVPROD, :NPRECOMOVPROD,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRC, :NSLDPRC, :ESTOQTIPOMOVPD)
              INTO :NSLDPRC, :NCUSTOMPMPRC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
              NSLDPRCAX = NSLDPRC;
              NCUSTOMPMPRCAX = NCUSTOMPMPRC;
          end
          else
          begin
          SELECT NSALDO, NCUSTOMPM
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRCAX, :NSLDPRCAX, :ESTOQTIPOMOVPD)
              INTO :NSLDPRCAX, :NCUSTOMPMPRCAX;
          end
          NCUSTOMPMLC = NCUSTOMPMPRC;
          NSLDLC = NSLDPRC;
          NCUSTOMPMLCAX = NCUSTOMPMPRCAX;
          NSLDLCAX = NSLDPRCAX;
      end
      else
      begin
          DDTPRC = DDTMOVPRODOLD;
          DDTPRCATE = DDTMOVPROD;
          /* verifica lançamento anterior e traz custo e saldo */

       --   execute procedure sgdebugsp('entrou no else','3');

          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, 0, 0,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMLC, :NCUSTOMPMLCAX,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDLC, :NCUSTOMPMLC, :NSLDLCAX, :NCUSTOMPMLCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
              :NCUSTOMPMLC, :NSLDLC, :ESTOQTIPOMOVPD)
              INTO :NSLDLC, :NCUSTOMPMLC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
             NSLDLCAX = NSLDLC;
             NCUSTOMPMLCAX = NCUSTOMPMLC;
          end
          else
          begin
              SELECT NSALDO, NCUSTOMPM
                  FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
                  :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
                  :NCUSTOMPMLCAX, :NSLDLCAX, :ESTOQTIPOMOVPD)
                  INTO :NSLDLCAX, :NCUSTOMPMLCAX;
          end

      end

       SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
        FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
          :SCODFILIALPD, :ICODPROD, :DDTPRC, :DDTPRCATE, :NSLDPRC,
          :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX,
          :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
        INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX;

      UPDATE EQMOVPROD SET DTMOVPROD=:DDTMOVPROD,
         QTDMOVPROD=:NQTDMOVPROD, PRECOMOVPROD=:NPRECOMOVPROD,
         SLDMOVPROD=:NSLDLC, CUSTOMPMMOVPROD=:NCUSTOMPMLC,
         SLDMOVPRODAX=:NSLDLCAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMLCAX,
         FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE, ESTOQMOVPROD=:CESTOQMOVPROD ,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
   end
   else /*  caso não tenha nenhuma alteração relevânte para processamento */

  --  execute procedure sgdebugsp('antes do reprocessamento','5SG');

      UPDATE EQMOVPROD SET FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
end
^

/* Alter (FNESTORNACOMISSAOSP) */
ALTER PROCEDURE FNESTORNACOMISSAOSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
CODREC INTEGER,
NPARCITREC SMALLINT)
 AS
declare variable vlrvendacomi numeric(15,5);
declare variable vlrcomi numeric(15,5);
declare variable datacomi date;
declare variable dtcompcomi date;
declare variable dtvenccomi date;
declare variable tipocomi char(1);
declare variable statuscomi char(2);
declare variable dtatual date;
declare variable dtvencitrec date;
declare variable codempvd integer;
declare variable codfilialvd smallint;
declare variable codvend integer;
begin
  /* Procedure Text */
  dtatual = cast( 'now' as date);

  select first 1 c.statuscomi, c.tipocomi, c.codempvd, c.codfilialvd, c.codvend
  , c.vlrvendacomi, c.vlrcomi, c.datacomi, c.dtcompcomi, ir.dtvencitrec , c.dtvenccomi
  from vdcomissao c, fnitreceber ir
  where c.codemprc=:codemp and c.codfilialrc=:codfilial and c.codrec=:codrec and c.nparcitrec=:nparcitrec and tipocomi='R'
  and ir.codemp=c.codemprc and ir.codfilial=c.codfilialrc and ir.codrec=c.codrec and ir.nparcitrec=c.nparcitrec
  and c.statuscomi<>'CE'
  order by c.codcomi desc
  into :statuscomi, :tipocomi, :codempvd, :codfilialvd,  :codvend
  , :vlrvendacomi, :vlrcomi, :datacomi, :dtcompcomi, :dtvencitrec, :dtvenccomi;

  if (statuscomi not in ('CP') ) then
  begin
      update vdcomissao c set c.statuscomi='C1'
      where c.codemprc=:codemp and c.codfilialrc=:codfilial and c.codrec=:codrec and c.nparcitrec=:nparcitrec
      and tipocomi='R' and statuscomi not in ('CP','CE');
  end
  else if (statuscomi in ('CP') ) then
  begin
      vlrcomi = vlrcomi * -1; /* Transforma o valor da comissão em negativo */
      /* para gerar estorno */
      execute procedure vdadiccomissaosp(:codemp,:codfilial,:codrec,
         :nparcitrec, :vlrvendacomi, :vlrcomi, :datacomi , :dtcompcomi, :dtvenccomi,
         :tipocomi, :codempvd, :codfilialvd, : codvend );

     -- execute vdadiccomissaosp
  end

  /*UPDATE VDCOMISSAO SET STATUSCOMI='C1'
              WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC
              AND CODEMPRC = new.CODEMP AND CODFILIALRC=new.CODFILIAL
              AND CODEMP=new.CODEMP AND CODFILIAL=:SCODFILIALCI
              AND STATUSCOMI NOT IN ('CE') AND TIPOCOMI='R';
    */
--  FOR SELECT C.CODCOMI,C.CODEMPRC, C.CODFILIALRC , C.CODREC, C.NPARCITREC,
--      C.VLRVENDACOMI, C.VLRCOMI, C.DATACOMI , C.DTCOMPCOMI, C.DTVENCCOMI,
--      C.TIPOCOMI, C.STATUSCOMI , IR.STATUSITREC, IR.DTVENCITREC
--    FROM VDCOMISSAO C, FNITRECEBER IR, FNRECEBER R
--    WHERE C.CODEMP=:CODEMP AND C.CODFILIAL=:CODFILIAL AND
--       IR.CODEMP=C.CODEMPRC AND IR.CODFILIAL=C.CODFILIALRC AND
--       IR.CODREC=C.CODREC AND IR.NPARCITREC=C.NPARCITREC AND
--       R.CODEMP=C.CODEMPRC AND R.CODFILIAL=C.CODFILIALRC AND
--       R.CODREC=C.CODREC
       --AND R.CODEMPVD=:CODEMPVD
       --AND
       --R.CODFILIALVD=:CODFILIALVD
       --AND R.CODVEND=:CODVEND AND
       --and ( (:CORDEM = 'V')  OR (C.DATACOMI BETWEEN :DINI AND :DFIM) ) AND
       --( (:CORDEM = 'E')  OR (C.DTVENCCOMI BETWEEN :DINI AND :DFIM) ) AND
--       and C.STATUSCOMI IN ('C2','CP') AND
--       IR.STATUSITREC NOT IN ('RP') AND
--       NOT EXISTS(SELECT * FROM VDCOMISSAO C2 /* Sub-select para verificar a */
          /* existencia de estorno anterior. */
--         WHERE C2.CODEMPRC=C.CODEMPRC AND C2.CODFILIALRC=C.CODFILIALRC AND
--         C2.CODREC=C.CODREC AND C2.NPARCITREC=C.NPARCITREC AND
--         C2.TIPOCOMI=C.TIPOCOMI AND C2.STATUSCOMI IN ('CE') )
--    INTO :CODCOMI, :CODEMP, :CODFILIAL, :CODREC, :NPARCITREC, :VLRVENDACOMI,
--      :VLRCOMI, :DATACOMI, :DTCOMPCOMI, :DTVENCCOMI, :TIPOCOMI, :STATUSCOMI, :STATUSITREC,
--      :DTVENCITREC
--  DO
--  BEGIN
--     IF ( (DTATUAL>DTVENCITREC) AND (STATUSCOMI='C2') ) THEN
     /* Caso a data atual seja maior que a data de vencimento e a */
     /* comissão não esteja paga, passa o status da comissão para não */
     /* liberada. */
--     BEGIN
--        UPDATE VDCOMISSAO SET STATUSCOMI='C1'
--          WHERE CODEMP=:CODEMP AND CODFILIAL=:CODFILIAL AND
--            CODCOMI=:CODCOMI;
--     END
--     ELSE IF ( (DTATUAL>DTVENCITREC) AND (STATUSCOMI='CP') ) THEN
     /* Caso a comissão esteja paga e a parcela esteja vencida, */
     /* gera um estorno da comissão. */
--     BEGIN
--        VLRCOMI = VLRCOMI * -1; /* Transforma o valor da comissão em negativo */
        /* para gerar estorno */
     --   EXECUTE PROCEDURE vdadiccomissaosp(:CODEMP,:CODFILIAL,:CODREC,
       --   :NPARCITREC, :VLRVENDACOMI, :VLRCOMI, :DATACOMI , :DTCOMPCOMI, :DTVENCITREC,
         -- :TIPOCOMI, :codempvd, :codfilialvd, : codvend );
--     END
--  END
 -- suspend;
end
^

/* Alter (SGRETVERSAO) */
ALTER PROCEDURE SGRETVERSAO RETURNS(VERSAO VARCHAR(30))
 AS
begin
    versao = '1.2.5.7 (07/03/2013)';
    suspend;
end
^

/* empty dependent procedure body */
/* Clear: VDESTORNACOMISSAOSP for: VDADICCOMISSAOSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE VDESTORNACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
ICODVEND INTEGER,
DINI DATE,
DFIM DATE,
CORDEM CHAR(1))
 AS
 BEGIN EXIT; END
^

/* empty dependent procedure body */
/* Clear: VDGERACOMISSAOSP for: VDADICCOMISSAOSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE VDGERACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
INPARCITREC INTEGER,
NVLRCOMIITREC NUMERIC(15,5),
DDTVENCITREC DATE)
 AS
 BEGIN EXIT; END
^

/* Alter (VDADICCOMISSAOSP) */
ALTER PROCEDURE VDADICCOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
INPARCITREC INTEGER,
NVLRVENDACOMI NUMERIC(15,5),
NVLRCOMI NUMERIC(15,5),
DDATACOMI DATE,
DDTCOMPCOMI DATE,
DDTVENCCOMI DATE,
CTIPOCOMI CHAR(1),
CODEMPVD INTEGER,
CODFILIALVD SMALLINT,
CODVEND INTEGER)
 AS
declare variable scodfilialcs smallint;
declare variable icodcomi integer;
declare variable cstatuscomi char(2);
begin

    -- Se o valor for nulo ou 0 deve deletar a comissão já gerada
    if ( (nvlrcomi is null) or  (nvlrcomi=0) ) then
    begin

        delete from vdcomissao co
        where co.codemprc=:icodemp and co.codfilialrc=:scodfilial and co.codrec=:icodrec and co.nparcitrec=:inparcitrec and
        co.tipocomi=:ctipocomi and codempvd=:codempvd and codfilialvd=:codfilialvd and codvend=:codvend;

    end
    -- Caso seja um estorno de comissão
    else if (nvlrcomi<0) then
    begin

        -- Buscando a filial da tabela de comissões
        select icodfilial from sgretfilial(:icodemp,'VDCOMISSAO') into :scodfilialcs;

        -- Buscando novo numero para
        select max(codcomi) from vdcomissao where codemp=:icodemp and codfilialvd = :scodfilialcs into icodcomi;

        if (:icodcomi is null) then
            icodcomi = 1;
        else
            icodcomi = icodcomi + 1;

        -- Inserindo na tabela de comissões
        insert into vdcomissao (
            codemp, codfilial, codcomi, codempRc, codfilialrc, codrec, nparcitrec, vlrvendacomi, vlrcomi, datacomi,
            dtcompcomi, dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend )
        values (
            :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec, :nvlrvendacomi, :nvlrcomi, :ddatacomi,
            :ddtcompcomi, :ddtvenccomi, 'CE', :ctipocomi, :codempvd, :codfilialvd,:codvend
            );

        -- Transforma o valor da comissão em positivo e programa para o proximo pagto.
        nvlrcomi = nvlrcomi * -1;

        icodcomi = icodcomi + 1;

        insert into vdcomissao (
            codemp, codfilial, codcomi, codemprc, codfilialrc, codrec, nparcitrec,
            vlrvendacomi, vlrcomi, datacomi, dtcompcomi,  dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend )
        values (
            :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec,
            :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvenccomi, 'C1', :ctipocomi, :codempvd,:codfilialvd,:codvend
            );

    end
    else
    begin

        if (ctipocomi='F') then
            cstatuscomi = 'C2';
        else
            cstatuscomi = 'C1';

        -- Buscando a filial da tabela de comissões
        select icodfilial from sgretfilial( :icodemp, 'VDCOMISSAO') into :scodfilialcs;

        -- Buscando o código da comissão já existente
        select codcomi from vdcomissao
        where codemp=:icodemp and codfilialrc=:scodfilial and codrec=:icodrec and nparcitrec=:inparcitrec and
        tipocomi=:ctipocomi and codempvd=:codempvd and codfilialvd=:codfilialvd and codvend=:codvend
        into :icodcomi;

        -- Caso já não exista a comissão deve inserir
        if (icodcomi is null) then
        begin
            --Buscando um novo código
            select max(codcomi) from vdcomissao where codemp=:icodemp and codfilial = :scodfilialcs into icodcomi;

            if (:icodcomi is null) then
                icodcomi = 1;
            else
                icodcomi = icodcomi + 1;

            -- Inserindo na tabela de comissões
            insert into vdcomissao( codemp, codfilial, codcomi, codemprc, codfilialrc, codrec, nparcitrec,
            vlrvendacomi, vlrcomi, datacomi, dtcompcomi, dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend)
            values (
                :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec,
                :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvenccomi, :cstatuscomi, :ctipocomi, :codempvd, :codfilialvd, :codvend
            );

        end
        -- Se encontrou a comissão atualiza
        else
        begin

            update vdcomissao set vlrvendacomi=:nvlrvendacomi, vlrcomi=:nvlrcomi, datacomi=:ddatacomi,
            dtvenccomi=:ddtvenccomi, statuscomi=:cstatuscomi
            where codemp=:icodemp and codfilial=:scodfilialcs and codcomi=:icodcomi and codempvd=:codempvd and
            codfilialvd=:codfilialvd and codvend=:codvend and statuscomi!='CP' ;

        end

    end
    suspend;
end
^

/* Alter (VDADICITORCRECMERCSP) */
ALTER PROCEDURE VDADICITORCRECMERCSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
TICKET INTEGER,
CODEMPOC INTEGER,
CODFILIALOC SMALLINT,
CODORC INTEGER,
COMPONENTES CHAR(1),
SERVICOS CHAR(1),
NOVOS CHAR(1))
 AS
declare variable codemppd integer;
declare variable codfilialpd integer;
declare variable codprod integer;
declare variable coditos integer;
declare variable coditorc integer;
declare variable codprodant integer;
declare variable coditrecmerc integer;
declare variable refprod varchar(20);
declare variable codemptm integer;
declare variable codfilialtm smallint;
declare variable codtipomov integer;
declare variable codempax integer;
declare variable codfilialax smallint;
declare variable codalmox integer;
declare variable precoitorc numeric(15,5);
declare variable qtditorc numeric(15,5);
declare variable codempcl integer;
declare variable codfilialcl smallint;
declare variable codcli integer;
declare variable codemppg integer;
declare variable codfilialpg smallint;
declare variable codplanopag integer;
declare variable gerachamado char(1);
declare variable obsitorc varchar(10000);
declare variable descprod char(100);
declare variable vlrliqitorc numeric(15,5);
declare variable vlrproditorc numeric(15,5);
declare variable usaprecopecaserv char(1);
declare variable codprodpeca integer;
declare variable garantia char(1);
declare variable codprodir integer;
declare variable refprodir varchar(20);
begin
    
    -- Buscando preferencias do GMS
    select coalesce(p8.usaprecopecaserv,'N') from sgprefere8 p8
    where p8.codemp=:codemp and p8.codfilial=:codfilial
    into :usaprecopecaserv;

    -- Buscando informações do orçamento
    select codempcl, codfilialcl, codcli, codemppg, codfilialpg, codplanopag, codemptm, codfilialtm, codtipomov
    from vdorcamento
    where codemp=:codempoc and codfilial=:codfilialoc and codorc=:codorc and tipoorc='O'
    into :codempcl, :codfilialcl, :codcli, :codemppg, :codfilialpg, :codplanopag, :codemptm, :codfilialtm, :codtipomov;

    -- Sendo um orçamento para peças e mão-de-obra
    -- Deve gerar orçamento dos ítens de suplemento
    for select ir.codemppd, ir.codfilialpd, ir.codprodpd, ir.refprodpd, ir.coditrecmerc, ir.coditos, ir.qtditos,
        ir.gerachamado, pd.descprod, irm.codprod, irm.garantia, irm.codprod codprodir, irm.refprod refprodir
        from eqitrecmercitos ir, eqitrecmerc irm, eqproduto pd
        where
        irm.codemp=ir.codemp and irm.codfilial=ir.codfilial and irm.ticket=ir.ticket and irm.coditrecmerc=ir.coditrecmerc
        and pd.codemp=irm.codemppd and pd.codfilial=irm.codfilialpd and irm.codprod=pd.codprod
        and ir.codemp=:codemp and ir.codfilial=:codfilial and ir.ticket=:ticket and
        -- Filtrando componentes e serviços
        (
           (ir.gerarma=:componentes and ir.gerarma='S') or
           (ir.gerachamado=:servicos and ir.gerachamado='S') or
           (ir.geranovo=:novos and ir.geranovo='S')
        )

        into :codemppd, :codfilialpd, :codprod, :refprod, :coditrecmerc, :coditos, :qtditorc,
             :gerachamado, :descprod, :codprodpeca, :garantia, :codprodir, :refprodir
        do
        begin

--            if(:codprod <> :codprodant or :codprodant is null) then
--            begin

                -- Verifica se é serviço, sendo serviço insere a descriçao do produto
                -- consertado na descrição auxiliar do item de orçamento
                if(:gerachamado=:servicos and :gerachamado='S') then
                begin
                    if( 'N' = :garantia ) then
                    begin
                        obsitorc = :refprodir || ' - ' || :descprod;
                    end
                    else
                    begin
                        obsitorc = :refprodir || ' - ' || :descprod || '[G]';
                    end

                end

                --Buscando código do item de orçamento
                select coalesce(max(coditorc)+1,1) from vditorcamento io
                where io.codemp=:codempoc and io.codfilial=:codfilialoc and io.codorc=:codorc and io.tipoorc='O'
                into :coditorc;

                -- Buscando preço de venda
                -- Se não está em garantia...

                if('N' = :garantia) then
                begin
                    -- Se o preço é basedo na peca, deve buscar o preço da peça
                    if(usaprecopecaserv='S') then
                    begin
                        select preco from vdbuscaprecosp(:codprodpeca,:codcli,:codempcl,:codfilialcl,
                        :codplanopag,:codemppg,:codfilialpg,:codtipomov,:codemptm,:codfilialtm,:codemp,:codfilial)
                        into :precoitorc;
                    end
                    else
                    begin
                        select preco from vdbuscaprecosp(:codprod,:codcli,:codempcl,:codfilialcl,
                        :codplanopag,:codemppg,:codfilialpg,:codtipomov,:codemptm,:codfilialtm,:codemp,:codfilial)
                        into :precoitorc;
                    end
                end
                else
                begin

                    precoitorc = 0.00;

                end

                -- Buscando informações do produto
                select pd.codempax, pd.codfilialax, pd.codalmox, pd.refprod from eqproduto pd
                where pd.codemp=:codemppd and pd.codfilial=:codfilialpd and pd.codprod=:codprod
                into :codempax, :codfilialax, :codalmox, :refprod;

                vlrproditorc = :qtditorc * :precoitorc;
                vlrliqitorc = vlrproditorc;

                -- Inserir itens
                insert into vditorcamento (
                codemp, codfilial, codorc, tipoorc, coditorc,
                codemppd, codfilialpd, codprod, refprod,
                qtditorc, precoitorc, codempax, codfilialax, codalmox, obsitorc, vlrproditorc, vlrliqitorc, sitproditorc)
                values (:codempoc, :codfilialoc, :codorc, 'O', :coditorc,
                :codemppd, :codfilialpd, :codprod, :refprod,
                :qtditorc, :precoitorc, :codempax, :codfilialax, :codalmox, :obsitorc, :vlrproditorc, :vlrliqitorc,
                'PE') ;

                -- Inserindo vínculo entre item de orçamento e ordem de serviço

                insert into eqitrecmercitositorc(codemp, codfilial, ticket, coditrecmerc, coditos, codempoc, codfilialoc, codorc, coditorc, tipoorc)
                values(:codemp,:codfilial,:ticket,:coditrecmerc,:coditos, :codempoc,:codfilialoc,:codorc,:coditorc,'O');

                codprodant = codprod;

--            end
        end

        -- Atualizando o status da ordem de serviço
        update eqrecmerc rm set rm.status = 'EO'
        where rm.codemp=:codemp and rm.codfilial=:codfilial and rm.ticket=:ticket;

end
^

/* Alter (VDBUSCAPRECOSP) */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
declare variable icodtab integer;
declare variable icodemptab integer;
declare variable icodfilialtab smallint;
declare variable icodclascli integer;
declare variable icodempclascli integer;
declare variable icodfilialclascli smallint;
declare variable percdesccli numeric(3,2);
declare variable desccli char(1);
declare variable arredpreco smallint;
declare variable codfilialpf integer;
declare variable centavos decimal(2,2);
declare variable precobase decimal(15,5);

begin
    -- Buscando código da filial de preferencias
    select icodfilial from sgretfilial(:icodemp,'SGFILIAL') into :codfilialpf;

    -- Buscando preferencias de arredondamento;
    select coalesce(arredpreco, 0)
    from sgprefere1 p1
    where p1.codemp=:icodemp and p1.codfilial=:codfilialpf
    into :arredpreco;

    -- Buscando tabela de preços do tipo de movimento;
    select codtab, codemptb, codfilialtb
    from eqtipomov
    where codtipomov=:icodtipomov and codemp=:icodemptm and codfilial=:icodfilialtm
    into :icodtab, :icodemptab, :icodfilialtab;


    -- Buscando informações do produto
    select coalesce(pd.desccli,'N'), coalesce(precobaseprod,0) from eqproduto pd
        where pd.codprod=:icodprod and pd.codemp=:icodemp and pd.codfilial=:icodfilial
        into :desccli, :precobase;

    -- Buscando informações do cliente
        
    select codclascli, codempcc, codfilialcc, coalesce(percdesccli,0) percdesccli
    from vdcliente
    where codcli=:icodcli and codemp=:icodempcl and codfilial=:icodfilialcl
    into :icodclascli, :icodempclascli, icodfilialclascli, :percdesccli;

     -- Buscando preço da tabela de preços utilizando todos os filtros exceto tabela de preços
    for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
    from vdprecoprod pp
    where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
    and pp.ativoprecoprod='S'
    and ( ( pp.codplanopag is null ) or (pp.codemppg=:icodemppg and pp.codfilialpg=:icodfilialpg and pp.codplanopag=:icodplanopag ) )
    and ( ( pp.codclascli is null) or (pp.codempcc=:icodempclascli and pp.codfilialcc=:icodfilialclascli and pp.codclascli=:icodclascli ) )
    order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
    into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
    begin
        --exception vdvendaex01 'Teste';

        if ( (:preco is not null) or (:preco <> 0) ) then
        begin
            --suspend;
            break;
        end
    end

    -- Buscando preço da tabela de preços específica
    if ( (:preco is null) or (:preco = 0) ) then
    begin

        for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
        from vdprecoprod pp
        where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
        and pp.ativoprecoprod='S'
        and pp.codemptb=:icodemptab and pp.codfilialtb=:icodfilialtab and pp.codtab=:icodtab
        order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
        into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
        begin
            --exception vdvendaex01 'Teste';

            if ( (:preco is not null) or (:preco <> 0) ) then
            begin
               --suspend;
               break;
            end
        end
    end

    --Se ainda não conseguiu pagar o preco, deve utilizar o preço base do produto aplicando o desconto especial do cliente se houver
    if ((preco is null) or (preco = 0)) then
    begin
 		preco = precobase;
    end

    -- Verifica se o cliente possui desconto especial e o produto permite este desconto...
    if( percdesccli >0 and 'S' = :desccli ) then
    begin
         preco = :preco - (:preco * (:percdesccli / 100)) ;
    end

    if( :arredpreco > 0 ) then
    begin

        -- capturando valor dos centavos
        centavos = ( cast(:preco as decimal(15,2)) - truncate(preco) ) * 10;

        -- se o valor em centavos é maior ou igual ao parametro de arredondamento (arredondar para cima)
        if(:centavos >= :arredpreco) then
        begin
            preco = truncate(preco) + 1;
        end
        else
        begin
            preco = truncate(preco);
        end

    end

    suspend;

end
^

/* Alter (VDESTORNACOMISSAOSP) */
ALTER PROCEDURE VDESTORNACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
ICODVEND INTEGER,
DINI DATE,
DFIM DATE,
CORDEM CHAR(1))
 AS
declare variable icodcomi integer;
declare variable icodemprc integer;
declare variable scodfilialrc smallint;
declare variable icodrec integer;
declare variable inparcitrec integer;
declare variable nvlrvendacomi numeric(15,5);
declare variable nvlrcomi numeric(15,5);
declare variable ddatacomi date;
declare variable ddtcompcomi date;
declare variable ddtvenccomi date;
declare variable ctipocomi char(1);
declare variable cstatuscomi char(2);
declare variable datual date;
declare variable cstatusitrec char(2);
declare variable ddtvencitrec date;
begin
  /* Procedure Text */
  DATUAL = CAST( 'now' AS DATE);
  FOR SELECT C.CODCOMI,C.CODEMPRC, C.CODFILIALRC , C.CODREC, C.NPARCITREC,
      C.VLRVENDACOMI, C.VLRCOMI, C.DATACOMI , C.DTCOMPCOMI, C.DTVENCCOMI,
      C.TIPOCOMI, C.STATUSCOMI , IR.STATUSITREC, IR.DTVENCITREC
    FROM VDCOMISSAO C, FNITRECEBER IR, FNRECEBER R
    WHERE C.CODEMP=:ICODEMP AND C.CODFILIAL=:SCODFILIAL AND
       IR.CODEMP=C.CODEMPRC AND IR.CODFILIAL=C.CODFILIALRC AND
       IR.CODREC=C.CODREC AND IR.NPARCITREC=C.NPARCITREC AND
       R.CODEMP=C.CODEMPRC AND R.CODFILIAL=C.CODFILIALRC AND
       R.CODREC=C.CODREC AND R.CODEMPVD=:ICODEMPVD AND
       R.CODFILIALVD=:SCODFILIALVD AND R.CODVEND=:ICODVEND AND
       ( (:CORDEM = 'V')  OR (C.DATACOMI BETWEEN :DINI AND :DFIM) ) AND
       ( (:CORDEM = 'E')  OR (C.DTVENCCOMI BETWEEN :DINI AND :DFIM) ) AND
       C.STATUSCOMI IN ('C2','CP') AND
       IR.STATUSITREC NOT IN ('RP') AND
       NOT EXISTS(SELECT * FROM VDCOMISSAO C2 /* Sub-select para verificar a */
          /* existencia de estorno anterior. */
         WHERE C2.CODEMPRC=C.CODEMPRC AND C2.CODFILIALRC=C.CODFILIALRC AND
         C2.CODREC=C.CODREC AND C2.NPARCITREC=C.NPARCITREC AND
         C2.TIPOCOMI=C.TIPOCOMI AND C2.STATUSCOMI IN ('CE') )
    INTO :ICODCOMI, :ICODEMPRC, :SCODFILIALRC, :ICODREC, :INPARCITREC, :NVLRVENDACOMI,
      :NVLRCOMI, :DDATACOMI, :DDTCOMPCOMI, :DDTVENCCOMI, :CTIPOCOMI, :CSTATUSCOMI, :CSTATUSITREC,
      :DDTVENCITREC
  DO
  BEGIN
     IF ( (DATUAL>DDTVENCITREC) AND (CSTATUSCOMI='C2') ) THEN
     /* Caso a data atual seja maior que a data de vencimento e a */
     /* comissão não esteja paga, passa o status da comissão para não */
     /* liberada. */
     BEGIN
        UPDATE VDCOMISSAO SET STATUSCOMI='C1'
          WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND
            CODCOMI=:ICODCOMI;
     END
     ELSE IF ( (DATUAL>DDTVENCITREC) AND (CSTATUSCOMI='CP') ) THEN
     /* Caso a comissão esteja paga e a parcela esteja vencida, */
     /* gera um estorno da comissão. */
     BEGIN
        NVLRCOMI = NVLRCOMI * -1; /* Transforma o valor da comissão em negativo */
        /* para gerar estorno */
        EXECUTE PROCEDURE vdadiccomissaosp(:ICODEMPRC,:SCODFILIALRC,:ICODREC,
          :INPARCITREC, :NVLRVENDACOMI, :NVLRCOMI, :DDATACOMI , :DDTCOMPCOMI, :DDTVENCITREC,
          :CTIPOCOMI, :icodempvd, :scodfilialvd, : icodvend );
     END
  END
  suspend;
end
^

/* empty dependent procedure body */
/* Clear: FNITRECEBERSP01 for: VDGERACOMISSAOSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE FNITRECEBERSP01(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
NVLRPARCREC NUMERIC(15,5),
NVLRCOMIREC NUMERIC(15,5),
INROPARCREC INTEGER,
CCLASCOMIS CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter (VDGERACOMISSAOSP) */
ALTER PROCEDURE VDGERACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
INPARCITREC INTEGER,
NVLRCOMIITREC NUMERIC(15,5),
DDTVENCITREC DATE)
 AS
declare variable icodempva integer;
declare variable scodfilialva smallint;
declare variable ctipovenda char(3);
declare variable icodvenda integer;
declare variable icodempcm integer;
declare variable scodfilialcm smallint;
declare variable icodclcomis integer;
declare variable nvlrvendacomi numeric(15,5);
declare variable ddatacomi date;
declare variable ddtcompcomi date;
declare variable npercfatclcomis numeric(9,2);
declare variable npercpgtoclcomis numeric(9,2);
declare variable ctipocomi char(1);
declare variable nvlrcomi numeric(15,5);
declare variable i integer;
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable cmulticomis char(1);
declare variable icodempvd integer; /* Código da empresa do comissionado principal */
declare variable scodfilialvd smallint; /* Código da filial do comissionado principal */
declare variable icodvend integer; /* Código do comissionado principal */
declare variable nperccomisvendadic numeric(15,2); /* Percentual de comissão para cada comissionado adicional */
declare variable nvlrcomiadic numeric(15,5); /* Valor total da comissão para os comissionados adicionais. */
declare variable icodempvdadic integer; /* Código da empresa do comissionado adicional */
declare variable scodfilialvdadic smallint; /* Código da filial do comissionado adicional */
declare variable icodvendadic integer; /* Código do comissionado adicional */
declare variable nvlrcomiparc numeric(15,5); /* Valor da comissão por vendedor parcial. */
begin
    /* Gera as comissões a pagar na tabela VDCOMISSAO */


    nvlrcomiadic = 0;

    select r.codempva, r.codfilialva, r.tipovenda, r.codvenda,
        v.codempcm, v.codfilialcm, v.codclcomis, ( v.vlrprodvenda - v.vlrdescvenda ),
        v.dtemitvenda, v.dtcompvenda, cm.percfatclcomis, cm.percpgtoclcomis,
        v.codemptm, v.codfilialtm, v.codtipomov,
        v.codempvd, v.codfilialvd, v.codvend
        from fnreceber r, vdvenda v, vdclcomis cm
        where r.codemp=:icodemp and r.codfilial=:scodfilial and r.codrec=:icodrec
            and v.codemp=r.codempva and v.codfilial=r.codfilialva and v.tipovenda=r.tipovenda
            and v.codvenda=r.codvenda and cm.codemp=v.codempcm and cm.codfilial=v.codfilialcm
            and cm.codclcomis=v.codclcomis
    into :icodempva, :scodfilialva, :ctipovenda, :icodvenda,
         :icodempcm, :scodfilialcm, :icodclcomis, :nvlrvendacomi,
         :ddatacomi, :ddtcompcomi, :npercfatclcomis, :npercpgtoclcomis,
         :icodemptm, :scodfilialtm, :icodtipomov,
         :icodempvd, :scodfilialvd, :icodvend ;

    /*Verifica se deve utilizar mecanismo de multiplos comissionados*/

    select cmulticomis from sgretmulticomissp(:icodemp, :icodemptm, :scodfilialtm, :icodtipomov)
        into cmulticomis;

    if(cmulticomis = 'S') then
    begin

        /*Implementação do mecanismo de multiplos comissionados*/
        
        for select vc.codempvd, vc.codfilialvd, vc.codvend, vc.percvc
            from vdvendacomis vc
            where vc.codemp=:icodempva and vc.codfilial=:scodfilialva and vc.codvenda=:icodvenda
                and vc.tipovenda=:ctipovenda and vc.codvend is not null
        into :icodempvdadic, :scodfilialvdadic, :icodvendadic, :nperccomisvendadic do
        begin

            /* Calcula o valor da comissão proporcional para cada comissionado adicional*/

            nvlrcomi = cast( ( nvlrcomiitrec * nperccomisvendadic / 100 ) as numeric(15,5));
            I = 1;
            while (:I<=2) do
            begin
                if (I=1) then
                    begin
                        ctipocomi='F';
                        nvlrcomiparc = cast( ( nvlrcomi * npercfatclcomis / 100 ) as NUMERIC(15, 5));
                    end
                else
                    begin
                        ctipocomi='R';
                        nvlrcomiparc = cast( (nvlrcomi * npercpgtoclcomis / 100 ) as NUMERIC(15, 5));
                    end
                execute procedure vdadiccomissaosp(:iCodEmp, :sCodFilial, :iCodRec, :iNParcItRec,
                    :nVlrVendaComi, :nvlrcomiparc, :dDataComi, :dDtCompComi, :dDtVencItRec, cTipoComi,:icodempvdadic, :scodfilialvdadic, :icodvendadic );
                I=I+1;
                /*Acumula as comissões adicionais para posteriormente descontar do valor principal*/
                nvlrcomiadic = nvlrcomiadic + nvlrcomiparc;

           /*     exception vdcomissaoex02 'rodou procedure para o vendedor:' || cast(:icodempvdadic as char(2)) || '-' || cast(:scodfilialvdadic as char(2)) || '-' || cast(:icodvendadic as char(2)) || '-' || ' - nvlrcomiadic:' || cast(nvlrcomiadic as char(20));*/

            end

        end

    end

    /*Comissionamento do vendedor principal*/

    I = 1;
    while (:I<=2) do
        begin
            if (I=1) then
                begin
                    ctipocomi='F';
                    nvlrcomi = cast( ( (nvlrcomiitrec - nvlrcomiadic ) * nPercFatClComis / 100 ) as numeric(15, 5) );
                end
            else
                begin
                    ctipocomi='R';
                    nvlrcomi = cast( ( (nvlrcomiitrec - nvlrcomiadic ) * nPercPgtoClComis / 100 ) as numeric(15, 5));
                end
/*
                exception vdcomissaoex01 ''
                || cast(:icodempvd as char(2)) || '-' || cast(:scodfilialvd as char(2)) || '-' || cast(:icodvend as char(2))
                || 'nvlrcomi:' || cast(:nvlrcomi as char(20))
                || 'nvlrvendacomi:' || cast(:nvlrvendacomi as char(20));
  */
            execute procedure vdadiccomissaosp(:icodemp, :scodfilial, :icodrec, :inparcitrec,
                :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvencitrec, ctipocomi, :icodempvd, :scodfilialvd, :icodvend );


            I=I+1;
        end

        suspend;
end
^

/* Restore procedure body: EQMOVPRODDSP */
ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de deleção da tabela eqmovprod */
  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
  FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
    :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
    :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM, :ICODRMA,
    :SCODITRMA, :ICODEMPOP,  :SCODFILIALOP,  :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
  FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD,
   :ICODEMPPD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0, 0,
   :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX  ;

  /* DELETAR EQMOVPROD */
  DELETE FROM EQMOVPROD WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL
    AND CODMOVPROD=:ICODMOVPROD;

  /* REPROCESSAR ESTOQUE */
  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
      :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
      :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
      :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;

  /* ATUALIZA CUSTO NO CADASTRO DE PRODUTOS
   OPERADOR 1 PARA EFETUAR A ATUALIZAÇÃO SEMPRE
  EXECUTE PROCEDURE EQMOVPRODATCUSTSP( 1, :ICODEMP, :SCODFILIAL,
   :ICODMOVPROD,  :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0);
   */

  suspend;
end
^

/* Restore procedure body: FNITRECEBERSP01 */
ALTER PROCEDURE FNITRECEBERSP01(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
NVLRPARCREC NUMERIC(15,5),
NVLRCOMIREC NUMERIC(15,5),
INROPARCREC INTEGER,
CCLASCOMIS CHAR(1))
 AS
declare variable inparcitrec integer;
declare variable nvlrparcitrec numeric(15,5);
declare variable nperc numeric(10,6);
declare variable nvlrcomiitrec numeric(15,5);
declare variable nresto numeric(15,5);
declare variable dvencitrec date;
begin
    -- Procedure que atualiza a comissão na tabela ITRECEBER
    nResto = nVlrComiRec;

    for select nparcitrec, vlrparcitrec, dtvencitrec from fnitreceber
    where codemp=:icodemp and codfilial=:scodfilial and codrec=:icodrec
    order by nparcitrec
    into :inparcitrec , :nvlrparcitrec, :dvencitrec do

    begin
        nperc = nvlrparcitrec / nvlrparcrec;
        nvlrcomiitrec = cast( (nvlrcomirec * nperc) as numeric(15, 5) );
        nresto = nresto - nvlrcomiitrec;

        if (inparcitrec=inroparcrec) then
        begin
            nvlrcomiitrec = nvlrcomiitrec + nresto;
        end

        update fnitreceber ir set vlrcomiitrec=:nvlrcomiitrec where codemp=:icodemp and codfilial=:scodfilial
        and codrec=:icodrec and nparcitrec=:inparcitrec;

        if (cclascomis='S') then
            execute procedure vdgeracomissaosp(:icodemp, :scodfilial, :icodrec, :inparcitrec, :nvlrcomiitrec, :dvencitrec);
    end
    suspend;
end
^

/* Alter exist trigger... */
ALTER TRIGGER CPITCOMPRATGBI
as

declare variable srefprod varchar(20);
declare variable habCustoCompra char(1);
declare variable calctrib char(1);
declare variable utilizatbcalcca char(1) ;
declare variable codempcc integer;
declare variable codfilialcc smallint;
declare variable codcalc integer;
declare variable codempcf integer;
declare variable codfilialcf smallint;
declare variable codcf integer;
declare variable codemptm integer;
declare variable codfilialtm smallint;
declare variable codtipomov integer;



begin

    if (new.calccusto is null) then 
       new.calccusto = 'S';
    -- Buscando preferências
    select p.custocompra, p.utilizatbcalcca from sgprefere1 p
    where p.codemp=new.codemp and p.codfilial=new.codfilial
    into :habCustoCompra, :utilizatbcalcca;
    if (utilizatbcalcca is null) then
       utilizatbcalcca = 'N';

    --Buscando informações da compra
    select cp.calctrib from cpcompra cp
    where cp.codemp=new.codemp and cp.codfilial=new.codfilial and cp.codcompra=new.codcompra
    into :calctrib;

    -- Buscando referência do produto
    select refprod from eqproduto
    where codprod=new.codprod and codemp=new.codemppd and codfilial=new.codfilialpd
    into srefprod;

    -- Carregando valores padrão
    if (new.refprod is null) then new.refprod = srefprod;
    if (new.vlrdescitcompra is null) then new.vlrdescitcompra = 0;
    if (new.vlrbaseicmsitcompra is null) then new.vlrbaseicmsitcompra = 0;
    if (new.vlricmsitcompra is null) then new.vlricmsitcompra = 0;
    if (new.vlrbaseipiitcompra is null) then new.vlrbaseipiitcompra = 0;
    if (new.vlripiitcompra is null) then new.vlripiitcompra = 0;
    if (new.vlrliqitcompra is null) then new.vlrliqitcompra = 0;
    if (new.vlradicitcompra is null) then new.vlradicitcompra = 0;
    if (new.vlrfreteitcompra is null) then new.vlrfreteitcompra = 0;
    if (new.vlrbaseicmsstitcompra is null) then new.vlrbaseicmsstitcompra = 0;
    if (new.vlricmsstitcompra is null) then new.vlricmsstitcompra = 0;
    

    if(new.vlrliqitcompra=0) then
    begin
       new.vlrliqitcompra = (new.qtditcompra * new.precoitcompra) - new.vlrdescitcompra + new.vlradicitcompra;
    end

    -- Buscando e carregando almoxarifado do produto
    if (new.codalmox is null) then
    begin
        select codempax, codfilialax, codalmox from eqproduto
        where codemp=new.codemppd and codfilial=new.codfilialpd and codprod=new.codprod
        into new.codempax, new.codfilialax, new.codalmox;
    end

   	-- Buscando e carregando retenção de tributos
    if(calctrib='S') then
    begin
        select coalesce(bc.vlrbasefunrural,0), coalesce(bc.aliqfunrural,0), coalesce(bc.vlrfunrural,0), bc.codempif, bc.codfilialif, bc.codfisc, bc.coditfisc
        from lfbuscatribcompra(new.codemp, new.codfilial, new.codcompra, new.codemppd, new.codfilialpd, new.codprod, new.vlrliqitcompra) bc
        into new.vlrbasefunruralitcompra, new.aliqfunruralitcompra, new.vlrfunruralitcompra,
        new.codempif, new.codfilialif, new.codfisc, new.coditfisc;
    end
    
    
    -- Descontando o valor do funrual do valor liquido do ítem
    if( new.vlrfunruralitcompra > 0 ) then
    begin
        new.vlrliqitcompra = new.vlrliqitcompra - new.vlrfunruralitcompra;
    end
    
    
    -- Buscando e carregando custo do produto
    if ( ( ('N' = habCustoCompra) or (new.custoitcompra is null) ) and (new.calccusto='S') ) then
    begin
        if (utilizatbcalcca='N') then
        begin
            select nvlrcusto from cpcomprasp01(new.codemp, new.codfilial, new.qtditcompra, new.vlrliqitcompra, new.vlricmsitcompra)
            into new.custoitcompra;
        end
        else
        begin

            if (new.coditfisc is null) then
            begin
               select codempfr, codfilialfr, codfor, codemptm, codfilialtm, codtipomov
                  from cpcompra
                  where codemp=new.codemp and codfilial=new.codfilial and codcompra=new.codcompra
                  into :codempcf, :codfilialcf, :codcf, :codemptm, :codfilialtm, :codtipomov;

               select itfisc.codempif, itfisc.codfilialif, itfisc.codfisc, itfisc.coditfisc
                from lfbuscafiscalsp(new.codemppd, new.codfilialpd, new.codprod, :codempcf, :codfilialcf, :codcf
                 , :codemptm, :codfilialtm, :codtipomov, 'CP', new.codnat, null, null, null, null) itfisc
               into new.codempif, new.codfilialif, new.codfisc, new.coditfisc;
            end

            select codempcc, codfilialcc, codcalc from lfitclfiscal itcl
              where itcl.codemp=new.codempif and itcl.codfilial=new.codfilialif and itcl.codfisc=new.codfisc and itcl.coditfisc=new.coditfisc
            into :codempcc, :codfilialcc, :codcalc ;

            select vlrcusto from lfcalccustosp01( :codempcc, :codfilialcc, :codcalc, new.qtditcompra, new.vlrproditcompra*new.qtditcompra
             , new.vlricmsitcompra, new.vlripiitcompra, 0, 0, new.vlrissitcompra, new.vlrfunruralitcompra
             , new.vlriiitcompra, 0, 0, 0, 0, 0 )
            into new.custoitcompra;

        end
    end

    new.calccusto = 'S';
    
    --Atualizando totais da compra
    update cpcompra cp set cp.vlrdescitcompra=cp.vlrdescitcompra + new.vlrdescitcompra,
    cp.vlrprodcompra = cp.vlrprodcompra + new.vlrproditcompra,
    cp.vlrbaseicmscompra = cp.vlrbaseicmscompra + new.vlrbaseicmsitcompra,
    cp.vlricmscompra = cp.vlricmscompra + new.vlricmsitcompra,
    -- Icms subtituição tributária
    cp.vlrbaseicmsstcompra = cp.vlrbaseicmsstcompra + new.vlrbaseicmsstitcompra,
    cp.vlricmsstcompra = cp.vlricmsstcompra + new.vlricmsstitcompra,
    -- 
    cp.vlrisentascompra = cp.vlrisentascompra + new.vlrisentasitcompra,
    cp.vlroutrascompra = cp.vlroutrascompra + new.vlroutrasitcompra,
    cp.vlrbaseipicompra = cp.vlrbaseipicompra + new.vlrbaseipiitcompra,
    cp.vlripicompra = cp.vlripicompra + new.vlripiitcompra,
    cp.vlrliqcompra = cp.vlrliqcompra + new.vlrliqitcompra,
    cp.vlrfunruralcompra = coalesce(cp.vlrfunruralcompra,0) + coalesce(new.vlrfunruralitcompra,0)
    where cp.codcompra=new.codcompra and cp.codemp=new.codemp and cp.codfilial=new.codfilial;

end
^

/* Alter exist trigger... */
ALTER TRIGGER FNITPAGARTGAU
AS
    DECLARE VARIABLE PERMITBAIXAPARCJDM CHAR(1);
BEGIN
  IF ( not ( (new.EMMANUT='S') or ( (old.EMMANUT='S') and (old.EMMANUT is not null)) ) ) THEN
  BEGIN
     SELECT PERMITBAIXAPARCJDM FROM SGPREFERE1 WHERE CODEMP=new.CODEMP AND CODFILIAL=new.CODFILIAL INTO :PERMITBAIXAPARCJDM;
     UPDATE FNPAGAR SET VLRPAG = VLRPAG - old.VLRITPAG + new.VLRITPAG,
         VLRDESCPAG = VLRDESCPAG - old.VLRDESCITPAG + new.VLRDESCITPAG,
         VLRMULTAPAG = VLRMULTAPAG - old.VLRMULTAITPAG + new.VLRMULTAITPAG,
         VLRJUROSPAG = VLRJUROSPAG - old.VLRJUROSITPAG + new.VLRJUROSITPAG,
         VLRDEVPAG = VLRDEVPAG - old.VLRDEVITPAG + new.VLRDEVITPAG,
         VLRADICPAG = VLRADICPAG - old.VLRADICITPAG + new.VLRADICITPAG,
         VLRPARCPAG = VLRPARCPAG - old.VLRPARCITPAG + new.VLRPARCITPAG,
         VLRPAGOPAG = VLRPAGOPAG - old.VLRPAGOITPAG + new.VLRPAGOITPAG,
         VLRAPAGPAG = VLRAPAGPAG - old.VLRAPAGITPAG + new.VLRAPAGITPAG
         WHERE CODPAG=new.CODPAG
              AND CODEMP=new.CODEMP AND CODFILIAL=new.CODFILIAL;
         IF ( (:PERMITBAIXAPARCJDM='N') AND (new.STATUSITPAG='PL') AND ( (new.VLRDESCITPAG<>0) OR (new.VLRJUROSITPAG<>0) OR (new.VLRMULTAITPAG<>0) ) ) THEN
            EXCEPTION FNITPAGAREX02; 
   END
END
^

/* Alter exist trigger... */
ALTER TRIGGER FNITRECEBERTGAU
AS
  DECLARE VARIABLE ICODCLI INTEGER;
  DECLARE VARIABLE ICODEMPCL INTEGER;
  DECLARE VARIABLE ICODFILIALCL INTEGER;
  DECLARE VARIABLE SCODFILIALCI SMALLINT;
  DECLARE VARIABLE CODFILIALLC SMALLINT;
  DECLARE VARIABLE CODEMPLC INTEGER;
  DECLARE VARIABLE CODLANCA INTEGER;
  DECLARE VARIABLE VLRLANCA NUMERIC(15,5);
  DECLARE VARIABLE ESTITRECALTDTVENC CHAR(1);
  DECLARE VARIABLE AUTOBAIXAPARC CHAR(1);
  DECLARE VARIABLE PERMITBAIXAPARCJDM CHAR(1);
BEGIN
  IF ( not ( (new.EMMANUT='S') or ( (old.EMMANUT='S') and (old.EMMANUT is not null)) ) ) THEN
  BEGIN

     SELECT ESTITRECALTDTVENC, PERMITBAIXAPARCJDM FROM SGPREFERE1 WHERE CODEMP=new.CODEMP AND CODFILIAL=new.CODFILIAL INTO :ESTITRECALTDTVENC, :PERMITBAIXAPARCJDM;
     SELECT ITPP.AUTOBAIXAPARC FROM FNPARCPAG ITPP, FNRECEBER R
       WHERE ITPP.CODEMP=R.CODFILIALPG AND ITPP.CODFILIAL=R.CODFILIALPG AND ITPP.CODPLANOPAG=R.CODPLANOPAG AND
         ITPP.NROPARCPAG=new.NPARCITREC AND
          R.CODEMP=new.CODEMP AND R.CODFILIAL=new.CODFILIAL AND R.CODREC=new.CODREC
       INTO :AUTOBAIXAPARC;
     IF  ( ( (old.STATUSITREC IN ('RP','RL') )  AND (new.STATUSITREC='R1') ) OR
           ( (old.STATUSITREC IN ('RP','RL') )  AND (new.STATUSITREC='RR') ) OR
           ( (ESTITRECALTDTVENC='S') AND (AUTOBAIXAPARC='S') AND
             (old.DTVENCITREC<>new.DTVENCITREC) ) ) THEN
     BEGIN
       SELECT ICODFILIAL FROM SGRETFILIAL(new.CODEMP,'FNCOMISSAO') INTO :SCODFILIALCI;
       SELECT ICODFILIAL FROM SGRETFILIAL(new.CODEMP,'FNLANCA') INTO :CODFILIALLC;
       
       execute procedure fnestornacomissaosp new.codemp, new.codfilial, new.codrec, new.nparcitrec;

       --UPDATE VDCOMISSAO SET STATUSCOMI='C1'
--              WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC
--              AND CODEMPRC = new.CODEMP AND CODFILIALRC=new.CODFILIAL
--              AND CODEMP=new.CODEMP AND CODFILIAL=:SCODFILIALCI
--              AND STATUSCOMI NOT IN ('CE') AND TIPOCOMI='R';
       
       
              
       IF ( (old.MULTIBAIXA IS NULL) OR (old.MULTIBAIXA='N') ) THEN
       BEGIN        
          DELETE FROM FNSUBLANCA WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC AND 
             CODEMPRC=new.CODEMP AND CODFILIALRC = new.CODFILIAL;
          DELETE FROM FNLANCA WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC AND 
             CODEMPRC=new.CODEMP AND CODFILIALRC = new.CODFILIAL;
       END
       ELSE 
       BEGIN
          SELECT CODEMP, CODFILIAL, CODLANCA FROM FNSUBLANCA
             WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC AND 
                CODEMPRC=new.CODEMP AND CODFILIALRC = new.CODFILIAL 
             INTO :CODEMPLC, :CODFILIALLC, :CODLANCA;
          DELETE FROM FNSUBLANCA WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC AND 
             CODEMPRC=new.CODEMP AND CODFILIALRC = new.CODFILIAL;
          SELECT VLRLANCA FROM FNLANCA
             WHERE CODEMP=:CODEMPLC AND CODFILIAL=:CODFILIALLC AND CODLANCA=:CODLANCA
             INTO :VLRLANCA;
          IF (:VLRLANCA=0) THEN 
          BEGIN
             DELETE FROM FNLANCA 
             WHERE CODEMP=:CODEMPLC AND CODFILIAL=:CODFILIALLC AND CODLANCA=:CODLANCA;
          END 
       END
     END
     ELSE IF ((old.STATUSITREC='R1' AND new.STATUSITREC in ('RP','RL')) OR
              (old.STATUSITREC='RR' AND new.STATUSITREC in ('RP','RL')) OR
              (old.STATUSITREC in ('RP','RL') AND new.STATUSITREC in ('RP','RL') AND new.VLRPAGOITREC > 0) OR
              (old.STATUSITREC = 'RB' AND new.STATUSITREC = 'RP')) THEN
     BEGIN
        SELECT CODCLI,CODEMPCL,CODFILIALCL FROM FNRECEBER WHERE CODEMP=new.CODEMP AND
           CODFILIAL=new.CODFILIAL AND CODREC=new.CODREC
           INTO ICODCLI,ICODEMPCL,ICODFILIALCL;
        IF ((new.VLRPAGOITREC-old.VLRPAGOITREC) > 0) THEN
        BEGIN
          IF(new.multibaixa is null or new.multibaixa = 'N')THEN
          BEGIN
             EXECUTE PROCEDURE FNADICLANCASP01(new.CodRec,new.NParcItRec,new.PDVITREC,new.NumConta,new.CODEMPCA,new.CODFILIALCA,:ICODCLI,:ICODEMPCL,:ICODFILIALCL,
                        new.CodPlan,new.CODEMPPN,new.CODFILIALPN,new.ANOCC,new.CODCC,new.CODEMPCC,new.CODFILIALCC, new.dtCompItRec, new.DtPagoItRec, 
                        new.DocLancaItRec, SUBSTRING(new.ObsItRec FROM 1 FOR 50),new.VlrPagoItRec-old.VlrPagoItRec,new.CODEMP,new.CODFILIAL,new.vlrjurositrec,new.vlrdescitrec);
          END
        END
        IF (new.STATUSITREC = 'RP') THEN
        BEGIN
            UPDATE VDCOMISSAO SET STATUSCOMI='C2'
               WHERE CODREC=old.CODREC
               AND CODEMPRC=old.CODEMP
               AND CODFILIALRC=old.CODFILIAL
               AND NPARCITREC=old.NPARCITREC
               AND NOT STATUSCOMI IN ('CP','C2')
               AND CODEMP=old.CODEMP;
        END
     END
     ELSE IF (old.VLRCOMIITREC != new.VLRCOMIITREC) THEN
     BEGIN
        EXECUTE PROCEDURE vdgeracomissaosp(new.CODEMP, new.CODFILIAL, new.CODREC,
           new.NPARCITREC, new.VLRCOMIITREC, new.DTVENCITREC);
     END

     IF ( (new.ALTUSUITREC='S') AND ( (old.VLRITREC!=new.VLRITREC) OR
          (old.VLRDESCITREC!=new.VLRDESCITREC) OR (old.VLRMULTAITREC!=new.VLRMULTAITREC) OR
          (old.VLRJUROSITREC!=new.VLRJUROSITREC) OR (old.VLRPARCITREC!=new.VLRPARCITREC) OR
          (old.VLRPAGOITREC!=new.VLRPAGOITREC) OR (old.VLRAPAGITREC!=new.VLRAPAGITREC) ) ) THEN
        UPDATE FNRECEBER SET VLRREC = VLRREC - old.VLRITREC + new.VLRITREC,
            VLRDESCREC = VLRDESCREC - old.VLRDESCITREC + new.VLRDESCITREC,
            VLRMULTAREC = VLRMULTAREC - old.VLRMULTAITREC + new.VLRMULTAITREC,
            VLRJUROSREC = VLRJUROSREC - old.VLRJUROSITREC + new.VLRJUROSITREC,
            VLRDEVREC = VLRDEVREC - old.VLRDEVITREC + new.VLRDEVITREC,
            VLRPARCREC = VLRPARCREC - old.VLRPARCITREC + new.VLRPARCITREC,
            VLRPAGOREC = VLRPAGOREC - old.VLRPAGOITREC + new.VLRPAGOITREC,
            ALTUSUREC = 'S' WHERE CODREC=new.CODREC
           AND CODEMP=new.CODEMP AND CODFILIAL=new.CODFILIAL;
      /* Condição para evitar baixa parcial de títulos com juros, descontos ou multas. */
      IF ( (:PERMITBAIXAPARCJDM='N') AND (new.STATUSITREC='RL') AND ( (new.VLRDESCITREC<>0) OR (new.VLRJUROSITREC<>0) OR (new.VLRMULTAITREC<>0) ) ) THEN
         EXCEPTION FNITRECEBEREX03; 
   END
   
END
^

/* Alter exist trigger... */
ALTER TRIGGER FNITRECEBERTGBU
AS

  DECLARE VARIABLE SCODFILIALPF SMALLINT;
  DECLARE VARIABLE CCOMISPDUPL CHAR(1);
  DECLARE VARIABLE NVLRPARCREC NUMERIC(15, 5);
  DECLARE VARIABLE NVLRCOMIREC NUMERIC(15, 5);
  DECLARE VARIABLE ESTITRECALTDTVENC CHAR(1);
  DECLARE VARIABLE AUTOBAIXAPARC CHAR(1);
  declare variable seqnossonumero int;
  DECLARE VARIABLE CODFILIALLC SMALLINT;
  DECLARE VARIABLE COUNTLANCA INTEGER;
BEGIN
  IF (new.EMMANUT IS NULL) THEN   /* Evita flag de manutenÃ§Ã£o nulo */
     new.EMMANUT='N';

  IF ( new.ALTUSUITREC IS NULL ) THEN /* Para nÃ£o permitir flag de usuÃ¡rio nulo */
     new.ALTUSUITREC = 'S';

  IF ( not ( (new.EMMANUT='S') or ( (old.EMMANUT='S') and (old.EMMANUT is not null)) ) ) THEN
  BEGIN
     new.DTALT=cast('now' AS DATE);
     new.IDUSUALT=USER;
     new.HALT = cast('now' AS TIME);

     IF ( (new.DTPAGOITREC is not null) AND (new.DTLIQITREC is null) ) THEN
     BEGIN
        new.DTLIQITREC = new.DTPAGOITREC;
     END

     SELECT ESTITRECALTDTVENC FROM SGPREFERE1 WHERE CODEMP=new.CODEMP AND CODFILIAL=new.CODFILIAL INTO :ESTITRECALTDTVENC;
     SELECT ITPP.AUTOBAIXAPARC FROM FNPARCPAG ITPP, FNRECEBER R
       WHERE ITPP.CODEMP=R.CODFILIALPG AND ITPP.CODFILIAL=R.CODFILIALPG AND ITPP.CODPLANOPAG=R.CODPLANOPAG AND
         ITPP.NROPARCPAG=new.NPARCITREC AND
          R.CODEMP=new.CODEMP AND R.CODFILIAL=new.CODFILIAL AND R.CODREC=new.CODREC
       INTO :AUTOBAIXAPARC;

     IF  ( ( (old.STATUSITREC IN ('RP','RL') )  AND (new.STATUSITREC IN ('R1', 'RR')) ) OR
           ( (ESTITRECALTDTVENC='S') AND (AUTOBAIXAPARC='S') AND
             (old.DTVENCITREC<>new.DTVENCITREC) ) ) THEN
     BEGIN
       IF(new.STATUSITREC != 'RR')THEN
       BEGIN
        new.STATUSITREC = 'R1';
       END
       new.VLRPAGOITREC = 0;
     END
     ELSE IF ( (old.STATUSITREC='R1') AND ( new.STATUSITREC='CR' ) ) THEN
     BEGIN
        IF ( (new.OBSITREC IS NULL) OR (rtrim(new.OBSITREC)='') ) THEN
        BEGIN
           EXCEPTION FNITRECEBEREX02;
        END
        new.VLRCANCITREC = new.VLRAPAGITREC;
        new.VLRPARCITREC = 0;
        new.VLRDESCITREC = 0;
        new.VLRJUROSITREC = 0;
        new.VLRDEVITREC = 0;
        new.VLRITREC = 0;
     END

     SELECT ICODFILIAL FROM SGRETFILIAL(new.CODEMP,'FNSUBLANCA') INTO :CODFILIALLC;
     SELECT COUNT (CODLANCA) FROM FNSUBLANCA WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC
              AND CODEMPRC= new.CODEMP AND CODFILIALRC=new.CODFILIAL
              AND CODEMP=new.CODEMP AND CODFILIAL = :CODFILIALLC INTO :COUNTLANCA;

     new.VLRITREC = new.VLRPARCITREC - new.VLRDESCITREC - new.VLRDEVITREC + new.VLRJUROSITREC + new.VLRMULTAITREC;
     new.VLRAPAGITREC = new.VLRITREC - new.VLRPAGOITREC;
     if (new.VLRAPAGITREC < 0 or new.VLRAPAGITREC is null ) then /* se o valor a pagar for menor que zero */
        new.VLRAPAGITREC = 0;  /* entÃ£o valor a pagar serÃ¡ zero */

     if(:countlanca <= 1)then
     begin
        if ( (new.VLRAPAGITREC=0) AND (new.STATUSITREC<>'CR') ) then /* se o valor a pagar for igual a zero */
            new.STATUSITREC = 'RP';  /* entÃ£o o status serÃ¡ RP(pagamento completo) */
        else if (new.VLRPAGOITREC>0) then /* caso contrÃ¡rio e o valor pago maior que zero */
            new.STATUSITREC = 'RL'; /*  entÃ£o o status serÃ¡ RL(pagamento parcial) */
     end
     /*
       Esta seÃ§Ã£o Ã© destinada e ajustar as comissÃµes conforme os valores de parcelas
       caso o preferÃªncias esteja ajustado para isso.
     */
     IF ( (new.VLRPARCITREC!=old.VLRPARCITREC) AND (new.VLRPARCITREC!=0) ) THEN
     BEGIN
        SELECT ICODFILIAL FROM SGRETFILIAL(new.CODEMP,'SGPREFERE1') INTO :SCODFILIALPF;
        SELECT P1.COMISPDUPL  FROM SGPREFERE1 P1
            WHERE P1.CODEMP=new.CODEMP AND P1.CODFILIAL=:SCODFILIALPF INTO :CCOMISPDUPL;
        IF (CCOMISPDUPL='S') THEN
        BEGIN
           SELECT V.VLRLIQVENDA, R.VLRCOMIREC FROM FNRECEBER R, VDVENDA V
             WHERE R.CODEMP=new.CODEMP AND R.CODFILIAL=new.CODFILIAL AND
                 R.CODREC=new.CODREC AND V.CODEMP=R.CODEMPVA AND V.CODFILIAL=R.CODFILIALVA AND
                 V.TIPOVENDA=R.TIPOVENDA AND V.CODVENDA=R.CODVENDA INTO :NVLRPARCREC, :NVLRCOMIREC;
           IF (NVLRPARCREC!=0) THEN
             new.VLRCOMIITREC = cast( new.VLRPARCITREC * :NVLRCOMIREC / :NVLRPARCREC as NUMERIC(15, 5) );
        END
     END
     IF ((old.IMPRECIBOITREC='N') AND (new.IMPRECIBOITREC='S') AND (new.RECIBOITREC IS NULL)) THEN
     BEGIN
        SELECT ISEQ FROM SPGERANUM(new.CODEMP,new.CODFILIAL,'RB') INTO new.RECIBOITREC;
     END
     /*AlteraÃ§Ã£o das datas de entrada e saida do estado de 'em cobranÃ§a'*/
     IF (new.RECEMCOB='S') THEN
     BEGIN
       new.DTINIEMCOB=CURRENT_DATE;
       new.DTFIMEMCOB=NULL;
     END
     ELSE IF (new.RECEMCOB='N') THEN
     BEGIN
       new.DTFIMEMCOB=CURRENT_DATE;
     END
     if(new.dtprevitrec is null) then
       new.dtprevitrec = new.dtvencitrec;

    --Buscando sequencial caso informaÃ§Ãµes de banco e carteira tenham sido alteradas...

       if ( (old.codbanco is null or old.codcartcob is null or old.numconta is null )
             or
            (new.codbanco != old.codbanco or new.codcartcob != old.codcartcob or new.numconta != old.numconta)
             and
            (new.codbanco is not null and new.codcartcob is not null and new.numconta is not null ) ) then

       begin

           seqnossonumero = 0;

          select seqnossonumero
          from fngeraseqnossonumero( new.codempbo, new.codfilialbo, new.codbanco, new.codempcb, new.codfilialcb, new.codcartcob, new.codempca, new.codfilialca, new.numconta)
          into :seqnossonumero;

          if (:seqnossonumero is not null and :seqnossonumero >0 ) then
          begin
             new.seqnossonumero = :seqnossonumero;
          end

       end
   end
end
^

/* Alter exist trigger... */
ALTER TRIGGER FNRECEBERTGBU
as
begin
  IF (new.EMMANUT IS NULL) then
     new.EMMANUT='N';
  IF ( not ( (new.EMMANUT='S') or ( (old.EMMANUT='S') and (old.EMMANUT is not null)) ) ) THEN
  BEGIN
      new.DTALT=cast('now' AS DATE);
      new.IDUSUALT=USER;
      new.HALT = cast('now' AS TIME);
      IF ( (new.DTCOMPREC IS NULL) or (new.DATAREC<>old.DATAREC) ) THEN
         new.DTCOMPREC = new.DATAREC;
      new.VLRAPAGREC = new.VLRREC - new.VLRPAGOREC;
      if ( (new.VLRAPAGREC<0 ) or ( new.VLRAPAGREC is null ) ) then
         new.VLRAPAGREC = 0;  
  END
  /* Trigger Text */
end
^

/* Alter empty procedure VDBUSCAPRECOSP with new param-list */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
 BEGIN EXIT; END
^

/* Alter Procedure... */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
declare variable icodtab integer;
declare variable icodemptab integer;
declare variable icodfilialtab smallint;
declare variable icodclascli integer;
declare variable icodempclascli integer;
declare variable icodfilialclascli smallint;
declare variable percdesccli numeric(3,2);
declare variable desccli char(1);
declare variable arredpreco smallint;
declare variable codfilialpf integer;
declare variable centavos decimal(2,2);
declare variable precobase decimal(15,5);

begin
    -- Buscando código da filial de preferencias
    select icodfilial from sgretfilial(:icodemp,'SGFILIAL') into :codfilialpf;

    -- Buscando preferencias de arredondamento;
    select coalesce(arredpreco, 0)
    from sgprefere1 p1
    where p1.codemp=:icodemp and p1.codfilial=:codfilialpf
    into :arredpreco;

    -- Buscando tabela de preços do tipo de movimento;
    select codtab, codemptb, codfilialtb
    from eqtipomov
    where codtipomov=:icodtipomov and codemp=:icodemptm and codfilial=:icodfilialtm
    into :icodtab, :icodemptab, :icodfilialtab;


    -- Buscando informações do produto
    select coalesce(pd.desccli,'N'), coalesce(precobaseprod,0) from eqproduto pd
        where pd.codprod=:icodprod and pd.codemp=:icodemp and pd.codfilial=:icodfilial
        into :desccli, :precobase;

    -- Buscando informações do cliente
        
    select codclascli, codempcc, codfilialcc, coalesce(percdesccli,0) percdesccli
    from vdcliente
    where codcli=:icodcli and codemp=:icodempcl and codfilial=:icodfilialcl
    into :icodclascli, :icodempclascli, icodfilialclascli, :percdesccli;

     -- Buscando preço da tabela de preços utilizando todos os filtros exceto tabela de preços
    for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
    from vdprecoprod pp
    where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
    and pp.ativoprecoprod='S'
    and ( ( pp.codplanopag is null ) or (pp.codemppg=:icodemppg and pp.codfilialpg=:icodfilialpg and pp.codplanopag=:icodplanopag ) )
    and ( ( pp.codclascli is null) or (pp.codempcc=:icodempclascli and pp.codfilialcc=:icodfilialclascli and pp.codclascli=:icodclascli ) )
    order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
    into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
    begin
        --exception vdvendaex01 'Teste';

        if ( (:preco is not null) or (:preco <> 0) ) then
        begin
            --suspend;
            break;
        end
    end

    -- Buscando preço da tabela de preços específica
    if ( (:preco is null) or (:preco = 0) ) then
    begin

        for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
        from vdprecoprod pp
        where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
        and pp.ativoprecoprod='S'
        and pp.codemptb=:icodemptab and pp.codfilialtb=:icodfilialtab and pp.codtab=:icodtab
        order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
        into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
        begin
            --exception vdvendaex01 'Teste';

            if ( (:preco is not null) or (:preco <> 0) ) then
            begin
               --suspend;
               break;
            end
        end
    end

    --Se ainda não conseguiu pagar o preco, deve utilizar o preço base do produto aplicando o desconto especial do cliente se houver
    if ((preco is null) or (preco = 0)) then
    begin
 		preco = precobase;
    end

    -- Verifica se o cliente possui desconto especial e o produto permite este desconto...
    if( percdesccli >0 and 'S' = :desccli ) then
    begin
         preco = :preco - (:preco * (:percdesccli / 100)) ;
    end

    if( :arredpreco > 0 ) then
    begin

        -- capturando valor dos centavos
        centavos = ( cast(:preco as decimal(15,2)) - truncate(preco) ) * 10;

        -- se o valor em centavos é maior ou igual ao parametro de arredondamento (arredondar para cima)
        if(:centavos >= :arredpreco) then
        begin
            preco = truncate(preco) + 1;
        end
        else
        begin
            preco = truncate(preco);
        end

    end

    suspend;

end
^

/* Alter (ATBUSCAPRECOSP) */
ALTER PROCEDURE ATBUSCAPRECOSP(ICODPROD INTEGER,
ICODCONV INTEGER,
ICODEMPCV INTEGER,
ICODFILIALCV SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(15,5))
 AS
DECLARE VARIABLE iCodTipoMov INTEGER;
  DECLARE VARIABLE iCodEmpTM INTEGER;
  DECLARE VARIABLE iCodFilialTM INTEGER;
  DECLARE VARIABLE iCodCli INTEGER;
  DECLARE VARIABLE iCodEmpCli INTEGER;
  DECLARE VARIABLE iCodFilialCli INTEGER;
BEGIN
  SELECT CODTIPOMOV2,CODEMPT2,CODFILIALT2 FROM SGPREFERE1 WHERE CODEMP=:ICODEMP
         AND CODFILIAL=:ICODFILIAL INTO iCodTipoMov,iCodEmpTM,iCodFilialTM;
  SELECT CODCLI,CODEMPCL,CODFILIALCL FROM ATCONVENIADO WHERE CODCONV=:ICODCONV
         AND CODEMP=:ICODEMPCV AND CODFILIAL=:ICODFILIALCV INTO iCodCli,iCodEmpCli,iCodFilialCli;

  SELECT PRECO FROM VDBUSCAPRECOSP(:ICODPROD,:iCodCli,:iCodEmpCli,:iCodFilialCli,:ICODPLANOPAG,:ICODEMPPG,
    :ICODFILIALPG,:iCodTipoMov,:iCodEmpTM,:iCodFilialTM,:ICODEMP,:ICODFILIAL) INTO PRECO;

  SUSPEND;
END
^

/* Alter (EQADICPRODUTOSP) */
ALTER PROCEDURE EQADICPRODUTOSP(CODEMPPD INTEGER,
CODFILIALPD INTEGER,
CODPROD INTEGER,
DESCPROD VARCHAR(100),
DESCAUXPROD VARCHAR(40),
REFPROD VARCHAR(20),
CODFABPROD CHAR(15),
CODBARPROD CHAR(13),
CODEMPMG INTEGER,
CODFILIALMG SMALLINT,
CODMODG INTEGER,
DESCCOMPPROD VARCHAR(500))
 AS
declare variable codnovo integer;
declare variable codalmox integer;
declare variable codempax integer;
declare variable codfilialax integer;
declare variable codmoeda char(4);
declare variable codempma integer;
declare variable codfilialma integer;
declare variable codunid varchar(20);
declare variable codempud integer;
declare variable codfilialud integer;
declare variable codfisc char(13);
declare variable codempfc integer;
declare variable codfilialfc integer;
declare variable codmarca char(6);
declare variable codempmc integer;
declare variable codfilialmc integer;
declare variable codgrup char(10);
declare variable codempgp integer;
declare variable codfilialgp integer;
declare variable tipoprod varchar(2);
declare variable cvprod char(1);
declare variable cloteprod char(1);
declare variable comisprod numeric(15,5);
declare variable pesoliqprod numeric(15,5);
declare variable pesobrutprod numeric(15,5);
declare variable qtdminprod numeric(15,5);
declare variable qtdmaxprod numeric(15,5);
declare variable precobaseprod numeric(15,5);
BEGIN
  BEGIN
    BEGIN
      codnovo = CAST(REFPROD AS INTEGER);
/*Se não conseguir converter para int causa uma excessão e entra neste bloco: */
      WHEN ANY DO
      BEGIN
        SELECT MAX(CODPROD) FROM EQPRODUTO
           WHERE CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD INTO :codnovo;
        if (codnovo is null) then
           codnovo = 0;
        codnovo = codnovo + 1;
      END
    END
    SELECT CODALMOX,CODEMPAX,CODFILIALAX,CODMOEDA,CODEMPMA,CODFILIALMA,CODUNID
           ,CODEMPUD,CODFILIALUD,CODFISC,CODEMPFC,CODFILIALFC,CODMARCA
           ,CODEMPMC,CODFILIALMC,CODGRUP,CODEMPGP,CODFILIALGP,TIPOPROD
           ,CVPROD,CLOTEPROD,COMISPROD,PESOLIQPROD,PESOBRUTPROD,QTDMINPROD
           ,QTDMAXPROD,PRECOBASEPROD
           FROM EQPRODUTO WHERE CODPROD=:Codprod
           AND CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD
           INTO
           :CODALMOX,:CODEMPAX,:CODFILIALAX,:CODMOEDA,:CODEMPMA,:CODFILIALMA,:CODUNID
           ,:CODEMPUD,:CODFILIALUD,:CODFISC,:CODEMPFC,:CODFILIALFC,:CODMARCA
           ,:CODEMPMC,:CODFILIALMC,:CODGRUP,:CODEMPGP,:CODFILIALGP,:TIPOPROD
           ,:CVPROD,:CLOTEPROD,:COMISPROD,:PESOLIQPROD,:PESOBRUTPROD,:QTDMINPROD,
           :QTDMAXPROD,:PRECOBASEPROD;
    INSERT INTO EQPRODUTO (CODEMP,CODFILIAL,CODPROD,REFPROD,CODALMOX,CODEMPAX,CODFILIALAX,CODMOEDA,CODEMPMA
          ,CODFILIALMA,CODUNID,CODEMPUD,CODFILIALUD,CODFISC,CODEMPFC,CODFILIALFC,CODMARCA,CODEMPMC,CODFILIALMC
          ,CODGRUP,CODEMPGP,CODFILIALGP,TIPOPROD,CVPROD,DESCPROD,DESCAUXPROD,CLOTEPROD,CODBARPROD,CODFABPROD
          ,COMISPROD,PESOLIQPROD,PESOBRUTPROD,QTDMINPROD,QTDMAXPROD,PRECOBASEPROD
          ,CODEMPOG, CODFILIALOG, CODPRODOG, CODEMPMG, CODFILIALMG, CODMODG, DESCCOMPPROD)
           VALUES (
                  :CODEMPPD,:CODFILIALPD,:Codnovo,:RefProd,:CODALMOX,:CODEMPAX,:CODFILIALAX,:CODMOEDA,:CODEMPMA,:CODFILIALMA
                  ,:CODUNID,:CODEMPUD,:CODFILIALUD,:CODFISC,:CODEMPFC,:CODFILIALFC,:CODMARCA,:CODEMPMC,:CODFILIALMC
                  ,:CODGRUP,:CODEMPGP,:CODFILIALGP,:TIPOPROD,:CVPROD,:Descprod,:DescAuxprod,:CLOTEPROD,:Codbarprod,:Codfabprod
                  ,:COMISPROD,:PESOLIQPROD,:PESOBRUTPROD,:QTDMINPROD,:QTDMAXPROD,:PRECOBASEPROD
                  ,:CODEMPPD, :CODFILIALPD, :CODPROD, :CODEMPMG, :CODFILIALMG, :CODMODG, :DESCCOMPPROD
           );
    INSERT INTO VDPRECOPROD (CODEMP,CODFILIAL,CODPROD,CODPRECOPROD,CODCLASCLI,CODEMPCC,CODFILIALCC,CODTAB,CODEMPTB,CODFILIALTB,CODPLANOPAG,CODEMPPG,CODFILIALPG,PRECOPROD)
           SELECT :CODEMPPD,:CODFILIALPD,:Codnovo,CODPRECOPROD,CODCLASCLI,CODEMPCC,CODFILIALCC,
                  CODTAB,CODEMPTB,CODFILIALTB,CODPLANOPAG,CODEMPPG,CODFILIALPG,PRECOPROD FROM VDPRECOPROD WHERE CODPROD=:Codprod
                  AND CODEMP=:CODEMPPD AND CODFILIAL=:CODFILIALPD;
  END
--  SUSPEND;
END
^

/* Alter (EQMOVPRODCSLDSP) */
ALTER PROCEDURE EQMOVPRODCSLDSP(ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPROD NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 RETURNS(NCUSTOMPM NUMERIC(15,5),
NSALDO NUMERIC(15,5),
CESTOQMOVPROD CHAR(1),
CTIPOMOVPROD CHAR(1),
SOPERADOR SMALLINT)
 AS
begin
  /* Procedure que retorna o cálculo de custo e saldo */
  NCUSTOMPM = 0;
  NSALDO = 0;
  SELECT CESTIPOMOV, SOPERADOR
     FROM EQMOVPRODCKTMSP( :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV, :ESTOQTIPOMOVPD)
     INTO :CTIPOMOVPROD, :SOPERADOR;
  if (SOPERADOR=0) then
  begin
     CESTOQMOVPROD = 'N';
     NSALDO = NSLDMOVPROD;
  end
  else
  begin  /* verifica se é para controlar estoque */
     CESTOQMOVPROD = 'S';
     NSALDO = NSLDMOVPROD + CAST ( (NQTDMOVPROD * SOPERADOR) AS NUMERIC(15, 5) );
  end
  if ( (NSALDO >= NSLDMOVPROD) AND (NSALDO > 0) AND (SOPERADOR>0) ) then
  begin
    if ( (NSLDMOVPROD * NCUSTOMPMMOVPROD)  <= 0) then
       NCUSTOMPM = NPRECOMOVPROD;
    else
        NCUSTOMPM = ( cast(NSLDMOVPROD * NCUSTOMPMMOVPROD as numeric(15,5) ) +
        cast(NQTDMOVPROD * NPRECOMOVPROD as numeric(15,5)) ) / (NSLDMOVPROD + NQTDMOVPROD) ;
  end
  else
      NCUSTOMPM = NCUSTOMPMMOVPROD;

  suspend;
end
^

/* Alter (EQMOVPRODDSP) */
ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de deleção da tabela eqmovprod */
  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
  FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
    :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
    :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM, :ICODRMA,
    :SCODITRMA, :ICODEMPOP,  :SCODFILIALOP,  :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
  FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD,
   :ICODEMPPD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0, 0,
   :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX  ;

  /* DELETAR EQMOVPROD */
  DELETE FROM EQMOVPROD WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL
    AND CODMOVPROD=:ICODMOVPROD;

  /* REPROCESSAR ESTOQUE */
  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
      :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
      :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
      :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;

  /* ATUALIZA CUSTO NO CADASTRO DE PRODUTOS
   OPERADOR 1 PARA EFETUAR A ATUALIZAÇÃO SEMPRE
  EXECUTE PROCEDURE EQMOVPRODATCUSTSP( 1, :ICODEMP, :SCODFILIAL,
   :ICODMOVPROD,  :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0);
   */

  suspend;
end
^

/* Alter (EQMOVPRODISP) */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable cestoqmovprod char(1);
declare variable ctipomovprod char(1);
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable soperador smallint;
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de inserção na tabela eqmovprod */

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX FROM EQMOVPRODSLDSP(null, null, null, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NPRECOMOVPROD, :NPRECOMOVPROD,
     :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX )
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

  /* Verifica se haverá mudança de saldo*/
  SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD, CTIPOMOVPROD, SOPERADOR FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
      :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :SOPERADOR;

  if (CMULTIALMOX='N') then
  begin
     NSLDMOVPRODAX = NSLDMOVPROD;
     NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
  end
  else
  begin
      SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
          :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
        INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
  end

  SELECT SCODFILIAL, ICODMOVPROD FROM EQMOVPRODSEQSP(:ICODEMPPD)
     INTO :SCODFILIAL, :ICODMOVPROD;  /* encontra o próximo código e a filial*/

   INSERT INTO EQMOVPROD ( CODEMP, CODFILIAL, CODMOVPROD,
      CODEMPPD, CODFILIALPD , CODPROD , CODEMPLE ,
      CODFILIALLE , CODLOTE , CODEMPTM, CODFILIALTM,
      CODTIPOMOV, CODEMPIV , CODFILIALIV , CODINVPROD ,
      CODEMPCP , CODFILIALCP , CODCOMPRA , CODITCOMPRA , CODEMPVD ,
      CODFILIALVD , TIPOVENDA , CODVENDA , CODITVENDA , CODEMPRM ,
      CODFILIALRM , CODRMA , CODITRMA ,
      CODEMPOP, CODFILIALOP, CODOP, SEQOP, SEQENTOP,
      CODEMPNT , CODFILIALNT ,
      CODNAT , DTMOVPROD , DOCMOVPROD , FLAG , QTDMOVPROD ,
      PRECOMOVPROD, ESTOQMOVPROD, TIPOMOVPROD, SLDMOVPROD, CUSTOMPMMOVPROD,
      SLDMOVPRODAX, CUSTOMPMMOVPRODAX, CODEMPAX, CODFILIALAX, CODALMOX, seqsubprod )
   VALUES ( :ICODEMPPD, :SCODFILIAL, :ICODMOVPROD,
    :ICODEMPPD , :SCODFILIALPD , :ICODPROD , :ICODEMPLE ,
    :SCODFILIALLE , :CCODLOTE , :ICODEMPTM, :SCODFILIALTM,
    :ICODTIPOMOV, :ICODEMPIV , :SCODFILIALIV ,
    :ICODINVPROD , :ICODEMPCP , :SCODFILIALCP , :ICODCOMPRA ,
    :SCODITCOMPRA , :ICODEMPVD , :SCODFILIALVD , :CTIPOVENDA ,
    :ICODVENDA , :SCODITVENDA , :ICODEMPRM , :SCODFILIALRM ,
    :ICODRMA , :SCODITRMA , :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop,
    :ICODEMPNT , :SCODFILIALNT , :CCODNAT ,
    :DDTMOVPROD , :IDOCMOVPROD , :CFLAG , :NQTDMOVPROD ,
    :NPRECOMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
    :NSLDMOVPRODAX,  :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :seqsubprod );

  /* REPROCESSAR ESTOQUE */

  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
     :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
     :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

 /* ATUALIZA O CUSTO NO CADASTRO DE PRODUTOS
   EXECUTE PROCEDURE EQMOVPRODATCUSTSP(:SOPERADOR, :ICODEMPPD, :SCODFILIAL,
    :ICODMOVPROD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMMOVPROD); 
 */


  suspend;
end
^

/* Alter (EQMOVPRODIUDSP) */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable cmultialmox char(1);
begin
  /* Procedure que controle INSERT, UPDATE E DELETE da tabela eqmovprod */

  /* Linha incluida para passar como parâmetro se é multi almoxarifado
      Como o objetivo de evitar I/O
  */
  SELECT CMULTIALMOX FROM SGRETMULTIALMOXSP(:ICODEMPPD) INTO :CMULTIALMOX;
  
  if (CIUD='I') then /* SE FOR INSERT */
     execute procedure EQMOVPRODISP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod, :estoqtipomovpd);
  else if (CIUD='U') then
     execute procedure EQMOVPRODUSP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX,:seqsubprod, :estoqtipomovpd);
  else if (CIUD='D') then
     execute procedure EQMOVPRODDSP( ICODEMPPD, SCODFILIALPD, ICODPROD, ICODEMPIV,
         SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA, SCODITCOMPRA,
         ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         DDTMOVPROD, ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod );
--  suspend;
end
^

/* Alter (EQMOVPRODPRCSLDSP) */
ALTER PROCEDURE EQMOVPRODPRCSLDSP(SCODFILIAL SMALLINT,
ICODMOVPROD INTEGER,
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
DDTMOVPROD DATE,
DDTMOVPRODPRC DATE,
NSLDMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPRODAX NUMERIC(15,5),
NCUSTOMPMMOVPRODAX NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1))
 RETURNS(NSLDPRC NUMERIC(15,5),
NCUSTOMPMPRC NUMERIC(15,5),
NSLDPRCAX NUMERIC(15,5),
NCUSTOMPMPRCAX NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable nqtdmovprod numeric(15,5);
declare variable nprecomovprod numeric(15,5);
declare variable icodmovprodprc integer;
declare variable cestoqmovprod char(1);
declare variable icodempaxprc integer;
declare variable scodfilialaxprc smallint;
declare variable icodalmoxprc integer;
begin
  /* Procedure de processamento de estoque */
  FOR SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV ,
    MP.QTDMOVPROD, MP.PRECOMOVPROD , MP.CODMOVPROD,
    MP.CODEMPAX, MP.CODFILIALAX, MP.CODALMOX, MP.ESTOQMOVPROD
    FROM EQMOVPROD MP
    WHERE MP.CODEMPPD=:ICODEMPPD AND MP.CODFILIALPD=:SCODFILIALPD AND
       MP.CODPROD=:ICODPROD AND MP.CODEMP=:ICODEMPPD AND MP.CODFILIAL=:SCODFILIAL AND
       ( (MP.DTMOVPROD = :DDTMOVPROD AND MP.CODMOVPROD > :ICODMOVPROD) OR
         (MP.DTMOVPROD>:DDTMOVPROD) ) AND  /* ALTEREI AQUI */
       ( (:DDTMOVPRODPRC IS NULL /* AND MP.CODMOVPROD!=:ICODMOVPROD */) OR
         (MP.DTMOVPROD = :DDTMOVPRODPRC AND MP.CODMOVPROD < :ICODMOVPROD) OR
         (MP.DTMOVPROD < :DDTMOVPRODPRC) )
    ORDER BY MP.DTMOVPROD, MP.CODMOVPROD
    INTO :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
     :NQTDMOVPROD, :NPRECOMOVPROD, :ICODMOVPRODPRC,
     :ICODEMPAXPRC, :SCODFILIALAXPRC, :ICODALMOXPRC, :ESTOQTIPOMOVPD DO
  BEGIN
      SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
        :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD;
      if (CMULTIALMOX='N') then /* Se não for multi almoxarifado*/
      begin
         NSLDMOVPRODAX = NSLDMOVPROD;
         NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
         UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else if (ICODEMPAX=ICODEMPAXPRC AND SCODFILIALAX=SCODFILIALAXPRC AND
          ICODALMOX=ICODALMOXPRC) then
          /* Se for multi almoxarifado e o código do almoxarifado for o mesmo*/
      begin
        SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
            :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
            INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else /* Se for multi almoxarifado não atualiza almoxarifado diferente */
      begin
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      NSLDPRC = NSLDMOVPROD;
      NCUSTOMPMPRC = NCUSTOMPMMOVPROD;
      NSLDPRCAX = NSLDMOVPRODAX;
      NCUSTOMPMPRCAX = NCUSTOMPMMOVPRODAX;
  END
  suspend;
end
^

/* Alter (EQMOVPRODUSP) */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldprc numeric(15,5);
declare variable ncustompmprc numeric(15,5);
declare variable nsldprcax numeric(15,5);
declare variable ncustompmprcax numeric(15,5);
declare variable nsldlc numeric(15,5);
declare variable ncustompmlc numeric(15,5);
declare variable nsldlcax numeric(15,5);
declare variable ncustompmlcax numeric(15,5);
declare variable ddtmovprodold date;
declare variable nprecomovprodold numeric(15,5);
declare variable nqtdmovprodold numeric(15,5);
declare variable icodemptmold integer;
declare variable scodfilialtmold smallint;
declare variable icodtipomovold integer;
declare variable calttm char(1);
declare variable ddtprc date;
declare variable ddtprcate date;
declare variable cestoqmovprod char(1);
begin
  /* Procedure de atualização da tabela eqmovprod */

  DDTPRCATE = NULL; /* Até onde deve ser processando o estoque */
 /* localiza movprod */

-- execute procedure sgdebugsp('antes da atualização...','no inicio');

  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
    FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
      :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
      :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM,
      :ICODRMA, :SCODITRMA, :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

--  traz valores antigos

  SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV, MP.DTMOVPROD,
       MP.PRECOMOVPROD, MP.QTDMOVPROD  FROM EQMOVPROD MP
     WHERE MP.CODEMP=:ICODEMP AND MP.CODFILIAL=:SCODFILIAL AND MP.CODMOVPROD=:ICODMOVPROD
     INTO :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD, :DDTMOVPRODOLD,
       :NPRECOMOVPRODOLD, :NQTDMOVPRODOLD;

   /* abaixo verificação se a alteração de tipo de movimento mexe no estoque */
   SELECT CALTTM FROM EQMOVPRODCKUTMSP(:ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
      :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD) INTO :CALTTM;

   /* verifica se há relevância para reprocessamento */
   if ( (DDTMOVPROD!=DDTMOVPRODOLD) OR (CALTTM='S') OR
        (NPRECOMOVPROD!=NPRECOMOVPRODOLD) OR (NQTDMOVPROD!=NQTDMOVPRODOLD) ) then
   begin

   -- execute procedure sgdebugsp('entrou no if','1');


      if ( DDTMOVPRODOLD IS NULL) then
         DDTMOVPRODOLD = DDTMOVPROD; /* garantir que a data antiga não e nula; */
      /* verifica qual data é menor para reprocessamento */
      if ( DDTMOVPROD<=DDTMOVPRODOLD ) then
      begin

     -- execute procedure sgdebugsp('entrou no if','2');

          DDTPRC = DDTMOVPROD;
          if (DDTMOVPROD=DDTMOVPRODOLD) then
             DDTPRCATE = null;
          else
             DDTPRCATE = DDTMOVPRODOLD;
/*          verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, :NPRECOMOVPROD, :NPRECOMOVPROD,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRC, :NSLDPRC, :ESTOQTIPOMOVPD)
              INTO :NSLDPRC, :NCUSTOMPMPRC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
              NSLDPRCAX = NSLDPRC;
              NCUSTOMPMPRCAX = NCUSTOMPMPRC;
          end
          else
          begin
          SELECT NSALDO, NCUSTOMPM
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRCAX, :NSLDPRCAX, :ESTOQTIPOMOVPD)
              INTO :NSLDPRCAX, :NCUSTOMPMPRCAX;
          end
          NCUSTOMPMLC = NCUSTOMPMPRC;
          NSLDLC = NSLDPRC;
          NCUSTOMPMLCAX = NCUSTOMPMPRCAX;
          NSLDLCAX = NSLDPRCAX;
      end
      else
      begin
          DDTPRC = DDTMOVPRODOLD;
          DDTPRCATE = DDTMOVPROD;
          /* verifica lançamento anterior e traz custo e saldo */

       --   execute procedure sgdebugsp('entrou no else','3');

          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, 0, 0,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMLC, :NCUSTOMPMLCAX,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDLC, :NCUSTOMPMLC, :NSLDLCAX, :NCUSTOMPMLCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
              :NCUSTOMPMLC, :NSLDLC, :ESTOQTIPOMOVPD)
              INTO :NSLDLC, :NCUSTOMPMLC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
             NSLDLCAX = NSLDLC;
             NCUSTOMPMLCAX = NCUSTOMPMLC;
          end
          else
          begin
              SELECT NSALDO, NCUSTOMPM
                  FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
                  :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
                  :NCUSTOMPMLCAX, :NSLDLCAX, :ESTOQTIPOMOVPD)
                  INTO :NSLDLCAX, :NCUSTOMPMLCAX;
          end

      end

       SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
        FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
          :SCODFILIALPD, :ICODPROD, :DDTPRC, :DDTPRCATE, :NSLDPRC,
          :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX,
          :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
        INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX;

      UPDATE EQMOVPROD SET DTMOVPROD=:DDTMOVPROD,
         QTDMOVPROD=:NQTDMOVPROD, PRECOMOVPROD=:NPRECOMOVPROD,
         SLDMOVPROD=:NSLDLC, CUSTOMPMMOVPROD=:NCUSTOMPMLC,
         SLDMOVPRODAX=:NSLDLCAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMLCAX,
         FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE, ESTOQMOVPROD=:CESTOQMOVPROD ,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
   end
   else /*  caso não tenha nenhuma alteração relevânte para processamento */

  --  execute procedure sgdebugsp('antes do reprocessamento','5SG');

      UPDATE EQMOVPROD SET FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
end
^

/* Alter (FNESTORNACOMISSAOSP) */
ALTER PROCEDURE FNESTORNACOMISSAOSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
CODREC INTEGER,
NPARCITREC SMALLINT)
 AS
declare variable vlrvendacomi numeric(15,5);
declare variable vlrcomi numeric(15,5);
declare variable datacomi date;
declare variable dtcompcomi date;
declare variable dtvenccomi date;
declare variable tipocomi char(1);
declare variable statuscomi char(2);
declare variable dtatual date;
declare variable dtvencitrec date;
declare variable codempvd integer;
declare variable codfilialvd smallint;
declare variable codvend integer;
begin
  /* Procedure Text */
  dtatual = cast( 'now' as date);

  select first 1 c.statuscomi, c.tipocomi, c.codempvd, c.codfilialvd, c.codvend
  , c.vlrvendacomi, c.vlrcomi, c.datacomi, c.dtcompcomi, ir.dtvencitrec , c.dtvenccomi
  from vdcomissao c, fnitreceber ir
  where c.codemprc=:codemp and c.codfilialrc=:codfilial and c.codrec=:codrec and c.nparcitrec=:nparcitrec and tipocomi='R'
  and ir.codemp=c.codemprc and ir.codfilial=c.codfilialrc and ir.codrec=c.codrec and ir.nparcitrec=c.nparcitrec
  and c.statuscomi<>'CE'
  order by c.codcomi desc
  into :statuscomi, :tipocomi, :codempvd, :codfilialvd,  :codvend
  , :vlrvendacomi, :vlrcomi, :datacomi, :dtcompcomi, :dtvencitrec, :dtvenccomi;

  if (statuscomi not in ('CP') ) then
  begin
      update vdcomissao c set c.statuscomi='C1'
      where c.codemprc=:codemp and c.codfilialrc=:codfilial and c.codrec=:codrec and c.nparcitrec=:nparcitrec
      and tipocomi='R' and statuscomi not in ('CP','CE');
  end
  else if (statuscomi in ('CP') ) then
  begin
      vlrcomi = vlrcomi * -1; /* Transforma o valor da comissão em negativo */
      /* para gerar estorno */
      execute procedure vdadiccomissaosp(:codemp,:codfilial,:codrec,
         :nparcitrec, :vlrvendacomi, :vlrcomi, :datacomi , :dtcompcomi, :dtvenccomi,
         :tipocomi, :codempvd, :codfilialvd, : codvend );

     -- execute vdadiccomissaosp
  end

  /*UPDATE VDCOMISSAO SET STATUSCOMI='C1'
              WHERE CODREC=new.CODREC AND NPARCITREC=new.NPARCITREC
              AND CODEMPRC = new.CODEMP AND CODFILIALRC=new.CODFILIAL
              AND CODEMP=new.CODEMP AND CODFILIAL=:SCODFILIALCI
              AND STATUSCOMI NOT IN ('CE') AND TIPOCOMI='R';
    */
--  FOR SELECT C.CODCOMI,C.CODEMPRC, C.CODFILIALRC , C.CODREC, C.NPARCITREC,
--      C.VLRVENDACOMI, C.VLRCOMI, C.DATACOMI , C.DTCOMPCOMI, C.DTVENCCOMI,
--      C.TIPOCOMI, C.STATUSCOMI , IR.STATUSITREC, IR.DTVENCITREC
--    FROM VDCOMISSAO C, FNITRECEBER IR, FNRECEBER R
--    WHERE C.CODEMP=:CODEMP AND C.CODFILIAL=:CODFILIAL AND
--       IR.CODEMP=C.CODEMPRC AND IR.CODFILIAL=C.CODFILIALRC AND
--       IR.CODREC=C.CODREC AND IR.NPARCITREC=C.NPARCITREC AND
--       R.CODEMP=C.CODEMPRC AND R.CODFILIAL=C.CODFILIALRC AND
--       R.CODREC=C.CODREC
       --AND R.CODEMPVD=:CODEMPVD
       --AND
       --R.CODFILIALVD=:CODFILIALVD
       --AND R.CODVEND=:CODVEND AND
       --and ( (:CORDEM = 'V')  OR (C.DATACOMI BETWEEN :DINI AND :DFIM) ) AND
       --( (:CORDEM = 'E')  OR (C.DTVENCCOMI BETWEEN :DINI AND :DFIM) ) AND
--       and C.STATUSCOMI IN ('C2','CP') AND
--       IR.STATUSITREC NOT IN ('RP') AND
--       NOT EXISTS(SELECT * FROM VDCOMISSAO C2 /* Sub-select para verificar a */
          /* existencia de estorno anterior. */
--         WHERE C2.CODEMPRC=C.CODEMPRC AND C2.CODFILIALRC=C.CODFILIALRC AND
--         C2.CODREC=C.CODREC AND C2.NPARCITREC=C.NPARCITREC AND
--         C2.TIPOCOMI=C.TIPOCOMI AND C2.STATUSCOMI IN ('CE') )
--    INTO :CODCOMI, :CODEMP, :CODFILIAL, :CODREC, :NPARCITREC, :VLRVENDACOMI,
--      :VLRCOMI, :DATACOMI, :DTCOMPCOMI, :DTVENCCOMI, :TIPOCOMI, :STATUSCOMI, :STATUSITREC,
--      :DTVENCITREC
--  DO
--  BEGIN
--     IF ( (DTATUAL>DTVENCITREC) AND (STATUSCOMI='C2') ) THEN
     /* Caso a data atual seja maior que a data de vencimento e a */
     /* comissão não esteja paga, passa o status da comissão para não */
     /* liberada. */
--     BEGIN
--        UPDATE VDCOMISSAO SET STATUSCOMI='C1'
--          WHERE CODEMP=:CODEMP AND CODFILIAL=:CODFILIAL AND
--            CODCOMI=:CODCOMI;
--     END
--     ELSE IF ( (DTATUAL>DTVENCITREC) AND (STATUSCOMI='CP') ) THEN
     /* Caso a comissão esteja paga e a parcela esteja vencida, */
     /* gera um estorno da comissão. */
--     BEGIN
--        VLRCOMI = VLRCOMI * -1; /* Transforma o valor da comissão em negativo */
        /* para gerar estorno */
     --   EXECUTE PROCEDURE vdadiccomissaosp(:CODEMP,:CODFILIAL,:CODREC,
       --   :NPARCITREC, :VLRVENDACOMI, :VLRCOMI, :DATACOMI , :DTCOMPCOMI, :DTVENCITREC,
         -- :TIPOCOMI, :codempvd, :codfilialvd, : codvend );
--     END
--  END
 -- suspend;
end
^

/* Alter (FNITRECEBERSP01) */
ALTER PROCEDURE FNITRECEBERSP01(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
NVLRPARCREC NUMERIC(15,5),
NVLRCOMIREC NUMERIC(15,5),
INROPARCREC INTEGER,
CCLASCOMIS CHAR(1))
 AS
declare variable inparcitrec integer;
declare variable nvlrparcitrec numeric(15,5);
declare variable nperc numeric(10,6);
declare variable nvlrcomiitrec numeric(15,5);
declare variable nresto numeric(15,5);
declare variable dvencitrec date;
begin
    -- Procedure que atualiza a comissão na tabela ITRECEBER
    nResto = nVlrComiRec;

    for select nparcitrec, vlrparcitrec, dtvencitrec from fnitreceber
    where codemp=:icodemp and codfilial=:scodfilial and codrec=:icodrec
    order by nparcitrec
    into :inparcitrec , :nvlrparcitrec, :dvencitrec do

    begin
        nperc = nvlrparcitrec / nvlrparcrec;
        nvlrcomiitrec = cast( (nvlrcomirec * nperc) as numeric(15, 5) );
        nresto = nresto - nvlrcomiitrec;

        if (inparcitrec=inroparcrec) then
        begin
            nvlrcomiitrec = nvlrcomiitrec + nresto;
        end

        update fnitreceber ir set vlrcomiitrec=:nvlrcomiitrec where codemp=:icodemp and codfilial=:scodfilial
        and codrec=:icodrec and nparcitrec=:inparcitrec;

        if (cclascomis='S') then
            execute procedure vdgeracomissaosp(:icodemp, :scodfilial, :icodrec, :inparcitrec, :nvlrcomiitrec, :dvencitrec);
    end
    suspend;
end
^

/* Alter (SGRETVERSAO) */
ALTER PROCEDURE SGRETVERSAO RETURNS(VERSAO VARCHAR(30))
 AS
begin
    versao = '1.2.5.7 (07/03/2013)';
    suspend;
end
^

/* Alter (VDADICCOMISSAOSP) */
ALTER PROCEDURE VDADICCOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
INPARCITREC INTEGER,
NVLRVENDACOMI NUMERIC(15,5),
NVLRCOMI NUMERIC(15,5),
DDATACOMI DATE,
DDTCOMPCOMI DATE,
DDTVENCCOMI DATE,
CTIPOCOMI CHAR(1),
CODEMPVD INTEGER,
CODFILIALVD SMALLINT,
CODVEND INTEGER)
 AS
declare variable scodfilialcs smallint;
declare variable icodcomi integer;
declare variable cstatuscomi char(2);
begin

    -- Se o valor for nulo ou 0 deve deletar a comissão já gerada
    if ( (nvlrcomi is null) or  (nvlrcomi=0) ) then
    begin

        delete from vdcomissao co
        where co.codemprc=:icodemp and co.codfilialrc=:scodfilial and co.codrec=:icodrec and co.nparcitrec=:inparcitrec and
        co.tipocomi=:ctipocomi and codempvd=:codempvd and codfilialvd=:codfilialvd and codvend=:codvend;

    end
    -- Caso seja um estorno de comissão
    else if (nvlrcomi<0) then
    begin

        -- Buscando a filial da tabela de comissões
        select icodfilial from sgretfilial(:icodemp,'VDCOMISSAO') into :scodfilialcs;

        -- Buscando novo numero para
        select max(codcomi) from vdcomissao where codemp=:icodemp and codfilialvd = :scodfilialcs into icodcomi;

        if (:icodcomi is null) then
            icodcomi = 1;
        else
            icodcomi = icodcomi + 1;

        -- Inserindo na tabela de comissões
        insert into vdcomissao (
            codemp, codfilial, codcomi, codempRc, codfilialrc, codrec, nparcitrec, vlrvendacomi, vlrcomi, datacomi,
            dtcompcomi, dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend )
        values (
            :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec, :nvlrvendacomi, :nvlrcomi, :ddatacomi,
            :ddtcompcomi, :ddtvenccomi, 'CE', :ctipocomi, :codempvd, :codfilialvd,:codvend
            );

        -- Transforma o valor da comissão em positivo e programa para o proximo pagto.
        nvlrcomi = nvlrcomi * -1;

        icodcomi = icodcomi + 1;

        insert into vdcomissao (
            codemp, codfilial, codcomi, codemprc, codfilialrc, codrec, nparcitrec,
            vlrvendacomi, vlrcomi, datacomi, dtcompcomi,  dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend )
        values (
            :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec,
            :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvenccomi, 'C1', :ctipocomi, :codempvd,:codfilialvd,:codvend
            );

    end
    else
    begin

        if (ctipocomi='F') then
            cstatuscomi = 'C2';
        else
            cstatuscomi = 'C1';

        -- Buscando a filial da tabela de comissões
        select icodfilial from sgretfilial( :icodemp, 'VDCOMISSAO') into :scodfilialcs;

        -- Buscando o código da comissão já existente
        select codcomi from vdcomissao
        where codemp=:icodemp and codfilialrc=:scodfilial and codrec=:icodrec and nparcitrec=:inparcitrec and
        tipocomi=:ctipocomi and codempvd=:codempvd and codfilialvd=:codfilialvd and codvend=:codvend
        into :icodcomi;

        -- Caso já não exista a comissão deve inserir
        if (icodcomi is null) then
        begin
            --Buscando um novo código
            select max(codcomi) from vdcomissao where codemp=:icodemp and codfilial = :scodfilialcs into icodcomi;

            if (:icodcomi is null) then
                icodcomi = 1;
            else
                icodcomi = icodcomi + 1;

            -- Inserindo na tabela de comissões
            insert into vdcomissao( codemp, codfilial, codcomi, codemprc, codfilialrc, codrec, nparcitrec,
            vlrvendacomi, vlrcomi, datacomi, dtcompcomi, dtvenccomi, statuscomi, tipocomi, codempvd, codfilialvd, codvend)
            values (
                :icodemp, :scodfilialcs, :icodcomi, :icodemp, :scodfilial, :icodrec, :inparcitrec,
                :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvenccomi, :cstatuscomi, :ctipocomi, :codempvd, :codfilialvd, :codvend
            );

        end
        -- Se encontrou a comissão atualiza
        else
        begin

            update vdcomissao set vlrvendacomi=:nvlrvendacomi, vlrcomi=:nvlrcomi, datacomi=:ddatacomi,
            dtvenccomi=:ddtvenccomi, statuscomi=:cstatuscomi
            where codemp=:icodemp and codfilial=:scodfilialcs and codcomi=:icodcomi and codempvd=:codempvd and
            codfilialvd=:codfilialvd and codvend=:codvend and statuscomi!='CP' ;

        end

    end
    suspend;
end
^

/* Alter (VDADICITORCRECMERCSP) */
ALTER PROCEDURE VDADICITORCRECMERCSP(CODEMP INTEGER,
CODFILIAL SMALLINT,
TICKET INTEGER,
CODEMPOC INTEGER,
CODFILIALOC SMALLINT,
CODORC INTEGER,
COMPONENTES CHAR(1),
SERVICOS CHAR(1),
NOVOS CHAR(1))
 AS
declare variable codemppd integer;
declare variable codfilialpd integer;
declare variable codprod integer;
declare variable coditos integer;
declare variable coditorc integer;
declare variable codprodant integer;
declare variable coditrecmerc integer;
declare variable refprod varchar(20);
declare variable codemptm integer;
declare variable codfilialtm smallint;
declare variable codtipomov integer;
declare variable codempax integer;
declare variable codfilialax smallint;
declare variable codalmox integer;
declare variable precoitorc numeric(15,5);
declare variable qtditorc numeric(15,5);
declare variable codempcl integer;
declare variable codfilialcl smallint;
declare variable codcli integer;
declare variable codemppg integer;
declare variable codfilialpg smallint;
declare variable codplanopag integer;
declare variable gerachamado char(1);
declare variable obsitorc varchar(10000);
declare variable descprod char(100);
declare variable vlrliqitorc numeric(15,5);
declare variable vlrproditorc numeric(15,5);
declare variable usaprecopecaserv char(1);
declare variable codprodpeca integer;
declare variable garantia char(1);
declare variable codprodir integer;
declare variable refprodir varchar(20);
begin
    
    -- Buscando preferencias do GMS
    select coalesce(p8.usaprecopecaserv,'N') from sgprefere8 p8
    where p8.codemp=:codemp and p8.codfilial=:codfilial
    into :usaprecopecaserv;

    -- Buscando informações do orçamento
    select codempcl, codfilialcl, codcli, codemppg, codfilialpg, codplanopag, codemptm, codfilialtm, codtipomov
    from vdorcamento
    where codemp=:codempoc and codfilial=:codfilialoc and codorc=:codorc and tipoorc='O'
    into :codempcl, :codfilialcl, :codcli, :codemppg, :codfilialpg, :codplanopag, :codemptm, :codfilialtm, :codtipomov;

    -- Sendo um orçamento para peças e mão-de-obra
    -- Deve gerar orçamento dos ítens de suplemento
    for select ir.codemppd, ir.codfilialpd, ir.codprodpd, ir.refprodpd, ir.coditrecmerc, ir.coditos, ir.qtditos,
        ir.gerachamado, pd.descprod, irm.codprod, irm.garantia, irm.codprod codprodir, irm.refprod refprodir
        from eqitrecmercitos ir, eqitrecmerc irm, eqproduto pd
        where
        irm.codemp=ir.codemp and irm.codfilial=ir.codfilial and irm.ticket=ir.ticket and irm.coditrecmerc=ir.coditrecmerc
        and pd.codemp=irm.codemppd and pd.codfilial=irm.codfilialpd and irm.codprod=pd.codprod
        and ir.codemp=:codemp and ir.codfilial=:codfilial and ir.ticket=:ticket and
        -- Filtrando componentes e serviços
        (
           (ir.gerarma=:componentes and ir.gerarma='S') or
           (ir.gerachamado=:servicos and ir.gerachamado='S') or
           (ir.geranovo=:novos and ir.geranovo='S')
        )

        into :codemppd, :codfilialpd, :codprod, :refprod, :coditrecmerc, :coditos, :qtditorc,
             :gerachamado, :descprod, :codprodpeca, :garantia, :codprodir, :refprodir
        do
        begin

--            if(:codprod <> :codprodant or :codprodant is null) then
--            begin

                -- Verifica se é serviço, sendo serviço insere a descriçao do produto
                -- consertado na descrição auxiliar do item de orçamento
                if(:gerachamado=:servicos and :gerachamado='S') then
                begin
                    if( 'N' = :garantia ) then
                    begin
                        obsitorc = :refprodir || ' - ' || :descprod;
                    end
                    else
                    begin
                        obsitorc = :refprodir || ' - ' || :descprod || '[G]';
                    end

                end

                --Buscando código do item de orçamento
                select coalesce(max(coditorc)+1,1) from vditorcamento io
                where io.codemp=:codempoc and io.codfilial=:codfilialoc and io.codorc=:codorc and io.tipoorc='O'
                into :coditorc;

                -- Buscando preço de venda
                -- Se não está em garantia...

                if('N' = :garantia) then
                begin
                    -- Se o preço é basedo na peca, deve buscar o preço da peça
                    if(usaprecopecaserv='S') then
                    begin
                        select preco from vdbuscaprecosp(:codprodpeca,:codcli,:codempcl,:codfilialcl,
                        :codplanopag,:codemppg,:codfilialpg,:codtipomov,:codemptm,:codfilialtm,:codemp,:codfilial)
                        into :precoitorc;
                    end
                    else
                    begin
                        select preco from vdbuscaprecosp(:codprod,:codcli,:codempcl,:codfilialcl,
                        :codplanopag,:codemppg,:codfilialpg,:codtipomov,:codemptm,:codfilialtm,:codemp,:codfilial)
                        into :precoitorc;
                    end
                end
                else
                begin

                    precoitorc = 0.00;

                end

                -- Buscando informações do produto
                select pd.codempax, pd.codfilialax, pd.codalmox, pd.refprod from eqproduto pd
                where pd.codemp=:codemppd and pd.codfilial=:codfilialpd and pd.codprod=:codprod
                into :codempax, :codfilialax, :codalmox, :refprod;

                vlrproditorc = :qtditorc * :precoitorc;
                vlrliqitorc = vlrproditorc;

                -- Inserir itens
                insert into vditorcamento (
                codemp, codfilial, codorc, tipoorc, coditorc,
                codemppd, codfilialpd, codprod, refprod,
                qtditorc, precoitorc, codempax, codfilialax, codalmox, obsitorc, vlrproditorc, vlrliqitorc, sitproditorc)
                values (:codempoc, :codfilialoc, :codorc, 'O', :coditorc,
                :codemppd, :codfilialpd, :codprod, :refprod,
                :qtditorc, :precoitorc, :codempax, :codfilialax, :codalmox, :obsitorc, :vlrproditorc, :vlrliqitorc,
                'PE') ;

                -- Inserindo vínculo entre item de orçamento e ordem de serviço

                insert into eqitrecmercitositorc(codemp, codfilial, ticket, coditrecmerc, coditos, codempoc, codfilialoc, codorc, coditorc, tipoorc)
                values(:codemp,:codfilial,:ticket,:coditrecmerc,:coditos, :codempoc,:codfilialoc,:codorc,:coditorc,'O');

                codprodant = codprod;

--            end
        end

        -- Atualizando o status da ordem de serviço
        update eqrecmerc rm set rm.status = 'EO'
        where rm.codemp=:codemp and rm.codfilial=:codfilial and rm.ticket=:ticket;

end
^

/* Alter (VDBUSCAPRECOSP) */
ALTER PROCEDURE VDBUSCAPRECOSP(ICODPROD INTEGER,
ICODCLI INTEGER,
ICODEMPCL INTEGER,
ICODFILIALCL SMALLINT,
ICODPLANOPAG INTEGER,
ICODEMPPG INTEGER,
ICODFILIALPG SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPTM INTEGER,
ICODFILIALTM SMALLINT,
ICODEMP INTEGER,
ICODFILIAL SMALLINT)
 RETURNS(PRECO NUMERIC(14,5),
CODCLASCLIP INTEGER,
CODPLANOPAGP INTEGER,
CODPRECOPRODP INTEGER,
CODTABP INTEGER)
 AS
declare variable icodtab integer;
declare variable icodemptab integer;
declare variable icodfilialtab smallint;
declare variable icodclascli integer;
declare variable icodempclascli integer;
declare variable icodfilialclascli smallint;
declare variable percdesccli numeric(3,2);
declare variable desccli char(1);
declare variable arredpreco smallint;
declare variable codfilialpf integer;
declare variable centavos decimal(2,2);
declare variable precobase decimal(15,5);

begin
    -- Buscando código da filial de preferencias
    select icodfilial from sgretfilial(:icodemp,'SGFILIAL') into :codfilialpf;

    -- Buscando preferencias de arredondamento;
    select coalesce(arredpreco, 0)
    from sgprefere1 p1
    where p1.codemp=:icodemp and p1.codfilial=:codfilialpf
    into :arredpreco;

    -- Buscando tabela de preços do tipo de movimento;
    select codtab, codemptb, codfilialtb
    from eqtipomov
    where codtipomov=:icodtipomov and codemp=:icodemptm and codfilial=:icodfilialtm
    into :icodtab, :icodemptab, :icodfilialtab;


    -- Buscando informações do produto
    select coalesce(pd.desccli,'N'), coalesce(precobaseprod,0) from eqproduto pd
        where pd.codprod=:icodprod and pd.codemp=:icodemp and pd.codfilial=:icodfilial
        into :desccli, :precobase;

    -- Buscando informações do cliente
        
    select codclascli, codempcc, codfilialcc, coalesce(percdesccli,0) percdesccli
    from vdcliente
    where codcli=:icodcli and codemp=:icodempcl and codfilial=:icodfilialcl
    into :icodclascli, :icodempclascli, icodfilialclascli, :percdesccli;

     -- Buscando preço da tabela de preços utilizando todos os filtros exceto tabela de preços
    for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
    from vdprecoprod pp
    where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
    and pp.ativoprecoprod='S'
    and ( ( pp.codplanopag is null ) or (pp.codemppg=:icodemppg and pp.codfilialpg=:icodfilialpg and pp.codplanopag=:icodplanopag ) )
    and ( ( pp.codclascli is null) or (pp.codempcc=:icodempclascli and pp.codfilialcc=:icodfilialclascli and pp.codclascli=:icodclascli ) )
    order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
    into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
    begin
        --exception vdvendaex01 'Teste';

        if ( (:preco is not null) or (:preco <> 0) ) then
        begin
            --suspend;
            break;
        end
    end

    -- Buscando preço da tabela de preços específica
    if ( (:preco is null) or (:preco = 0) ) then
    begin

        for select pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod, pp.precoprod
        from vdprecoprod pp
        where pp.codemp=:icodemp and pp.codfilial=:icodfilial and pp.codprod=:icodprod
        and pp.ativoprecoprod='S'
        and pp.codemptb=:icodemptab and pp.codfilialtb=:icodfilialtab and pp.codtab=:icodtab
        order by pp.codclascli, pp.codplanopag, pp.codtab, pp.codprecoprod
        into :codclasclip, :codplanopagp, :codtabp, :codprecoprodp, :preco do
        begin
            --exception vdvendaex01 'Teste';

            if ( (:preco is not null) or (:preco <> 0) ) then
            begin
               --suspend;
               break;
            end
        end
    end

    --Se ainda não conseguiu pagar o preco, deve utilizar o preço base do produto aplicando o desconto especial do cliente se houver
    if ((preco is null) or (preco = 0)) then
    begin
 		preco = precobase;
    end

    -- Verifica se o cliente possui desconto especial e o produto permite este desconto...
    if( percdesccli >0 and 'S' = :desccli ) then
    begin
         preco = :preco - (:preco * (:percdesccli / 100)) ;
    end

    if( :arredpreco > 0 ) then
    begin

        -- capturando valor dos centavos
        centavos = ( cast(:preco as decimal(15,2)) - truncate(preco) ) * 10;

        -- se o valor em centavos é maior ou igual ao parametro de arredondamento (arredondar para cima)
        if(:centavos >= :arredpreco) then
        begin
            preco = truncate(preco) + 1;
        end
        else
        begin
            preco = truncate(preco);
        end

    end

    suspend;

end
^

/* Alter (VDESTORNACOMISSAOSP) */
ALTER PROCEDURE VDESTORNACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
ICODVEND INTEGER,
DINI DATE,
DFIM DATE,
CORDEM CHAR(1))
 AS
declare variable icodcomi integer;
declare variable icodemprc integer;
declare variable scodfilialrc smallint;
declare variable icodrec integer;
declare variable inparcitrec integer;
declare variable nvlrvendacomi numeric(15,5);
declare variable nvlrcomi numeric(15,5);
declare variable ddatacomi date;
declare variable ddtcompcomi date;
declare variable ddtvenccomi date;
declare variable ctipocomi char(1);
declare variable cstatuscomi char(2);
declare variable datual date;
declare variable cstatusitrec char(2);
declare variable ddtvencitrec date;
begin
  /* Procedure Text */
  DATUAL = CAST( 'now' AS DATE);
  FOR SELECT C.CODCOMI,C.CODEMPRC, C.CODFILIALRC , C.CODREC, C.NPARCITREC,
      C.VLRVENDACOMI, C.VLRCOMI, C.DATACOMI , C.DTCOMPCOMI, C.DTVENCCOMI,
      C.TIPOCOMI, C.STATUSCOMI , IR.STATUSITREC, IR.DTVENCITREC
    FROM VDCOMISSAO C, FNITRECEBER IR, FNRECEBER R
    WHERE C.CODEMP=:ICODEMP AND C.CODFILIAL=:SCODFILIAL AND
       IR.CODEMP=C.CODEMPRC AND IR.CODFILIAL=C.CODFILIALRC AND
       IR.CODREC=C.CODREC AND IR.NPARCITREC=C.NPARCITREC AND
       R.CODEMP=C.CODEMPRC AND R.CODFILIAL=C.CODFILIALRC AND
       R.CODREC=C.CODREC AND R.CODEMPVD=:ICODEMPVD AND
       R.CODFILIALVD=:SCODFILIALVD AND R.CODVEND=:ICODVEND AND
       ( (:CORDEM = 'V')  OR (C.DATACOMI BETWEEN :DINI AND :DFIM) ) AND
       ( (:CORDEM = 'E')  OR (C.DTVENCCOMI BETWEEN :DINI AND :DFIM) ) AND
       C.STATUSCOMI IN ('C2','CP') AND
       IR.STATUSITREC NOT IN ('RP') AND
       NOT EXISTS(SELECT * FROM VDCOMISSAO C2 /* Sub-select para verificar a */
          /* existencia de estorno anterior. */
         WHERE C2.CODEMPRC=C.CODEMPRC AND C2.CODFILIALRC=C.CODFILIALRC AND
         C2.CODREC=C.CODREC AND C2.NPARCITREC=C.NPARCITREC AND
         C2.TIPOCOMI=C.TIPOCOMI AND C2.STATUSCOMI IN ('CE') )
    INTO :ICODCOMI, :ICODEMPRC, :SCODFILIALRC, :ICODREC, :INPARCITREC, :NVLRVENDACOMI,
      :NVLRCOMI, :DDATACOMI, :DDTCOMPCOMI, :DDTVENCCOMI, :CTIPOCOMI, :CSTATUSCOMI, :CSTATUSITREC,
      :DDTVENCITREC
  DO
  BEGIN
     IF ( (DATUAL>DDTVENCITREC) AND (CSTATUSCOMI='C2') ) THEN
     /* Caso a data atual seja maior que a data de vencimento e a */
     /* comissão não esteja paga, passa o status da comissão para não */
     /* liberada. */
     BEGIN
        UPDATE VDCOMISSAO SET STATUSCOMI='C1'
          WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND
            CODCOMI=:ICODCOMI;
     END
     ELSE IF ( (DATUAL>DDTVENCITREC) AND (CSTATUSCOMI='CP') ) THEN
     /* Caso a comissão esteja paga e a parcela esteja vencida, */
     /* gera um estorno da comissão. */
     BEGIN
        NVLRCOMI = NVLRCOMI * -1; /* Transforma o valor da comissão em negativo */
        /* para gerar estorno */
        EXECUTE PROCEDURE vdadiccomissaosp(:ICODEMPRC,:SCODFILIALRC,:ICODREC,
          :INPARCITREC, :NVLRVENDACOMI, :NVLRCOMI, :DDATACOMI , :DDTCOMPCOMI, :DDTVENCITREC,
          :CTIPOCOMI, :icodempvd, :scodfilialvd, : icodvend );
     END
  END
  suspend;
end
^

/* Alter (VDGERACOMISSAOSP) */
ALTER PROCEDURE VDGERACOMISSAOSP(ICODEMP INTEGER,
SCODFILIAL SMALLINT,
ICODREC INTEGER,
INPARCITREC INTEGER,
NVLRCOMIITREC NUMERIC(15,5),
DDTVENCITREC DATE)
 AS
declare variable icodempva integer;
declare variable scodfilialva smallint;
declare variable ctipovenda char(3);
declare variable icodvenda integer;
declare variable icodempcm integer;
declare variable scodfilialcm smallint;
declare variable icodclcomis integer;
declare variable nvlrvendacomi numeric(15,5);
declare variable ddatacomi date;
declare variable ddtcompcomi date;
declare variable npercfatclcomis numeric(9,2);
declare variable npercpgtoclcomis numeric(9,2);
declare variable ctipocomi char(1);
declare variable nvlrcomi numeric(15,5);
declare variable i integer;
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable cmulticomis char(1);
declare variable icodempvd integer; /* Código da empresa do comissionado principal */
declare variable scodfilialvd smallint; /* Código da filial do comissionado principal */
declare variable icodvend integer; /* Código do comissionado principal */
declare variable nperccomisvendadic numeric(15,2); /* Percentual de comissão para cada comissionado adicional */
declare variable nvlrcomiadic numeric(15,5); /* Valor total da comissão para os comissionados adicionais. */
declare variable icodempvdadic integer; /* Código da empresa do comissionado adicional */
declare variable scodfilialvdadic smallint; /* Código da filial do comissionado adicional */
declare variable icodvendadic integer; /* Código do comissionado adicional */
declare variable nvlrcomiparc numeric(15,5); /* Valor da comissão por vendedor parcial. */
begin
    /* Gera as comissões a pagar na tabela VDCOMISSAO */


    nvlrcomiadic = 0;

    select r.codempva, r.codfilialva, r.tipovenda, r.codvenda,
        v.codempcm, v.codfilialcm, v.codclcomis, ( v.vlrprodvenda - v.vlrdescvenda ),
        v.dtemitvenda, v.dtcompvenda, cm.percfatclcomis, cm.percpgtoclcomis,
        v.codemptm, v.codfilialtm, v.codtipomov,
        v.codempvd, v.codfilialvd, v.codvend
        from fnreceber r, vdvenda v, vdclcomis cm
        where r.codemp=:icodemp and r.codfilial=:scodfilial and r.codrec=:icodrec
            and v.codemp=r.codempva and v.codfilial=r.codfilialva and v.tipovenda=r.tipovenda
            and v.codvenda=r.codvenda and cm.codemp=v.codempcm and cm.codfilial=v.codfilialcm
            and cm.codclcomis=v.codclcomis
    into :icodempva, :scodfilialva, :ctipovenda, :icodvenda,
         :icodempcm, :scodfilialcm, :icodclcomis, :nvlrvendacomi,
         :ddatacomi, :ddtcompcomi, :npercfatclcomis, :npercpgtoclcomis,
         :icodemptm, :scodfilialtm, :icodtipomov,
         :icodempvd, :scodfilialvd, :icodvend ;

    /*Verifica se deve utilizar mecanismo de multiplos comissionados*/

    select cmulticomis from sgretmulticomissp(:icodemp, :icodemptm, :scodfilialtm, :icodtipomov)
        into cmulticomis;

    if(cmulticomis = 'S') then
    begin

        /*Implementação do mecanismo de multiplos comissionados*/
        
        for select vc.codempvd, vc.codfilialvd, vc.codvend, vc.percvc
            from vdvendacomis vc
            where vc.codemp=:icodempva and vc.codfilial=:scodfilialva and vc.codvenda=:icodvenda
                and vc.tipovenda=:ctipovenda and vc.codvend is not null
        into :icodempvdadic, :scodfilialvdadic, :icodvendadic, :nperccomisvendadic do
        begin

            /* Calcula o valor da comissão proporcional para cada comissionado adicional*/

            nvlrcomi = cast( ( nvlrcomiitrec * nperccomisvendadic / 100 ) as numeric(15,5));
            I = 1;
            while (:I<=2) do
            begin
                if (I=1) then
                    begin
                        ctipocomi='F';
                        nvlrcomiparc = cast( ( nvlrcomi * npercfatclcomis / 100 ) as NUMERIC(15, 5));
                    end
                else
                    begin
                        ctipocomi='R';
                        nvlrcomiparc = cast( (nvlrcomi * npercpgtoclcomis / 100 ) as NUMERIC(15, 5));
                    end
                execute procedure vdadiccomissaosp(:iCodEmp, :sCodFilial, :iCodRec, :iNParcItRec,
                    :nVlrVendaComi, :nvlrcomiparc, :dDataComi, :dDtCompComi, :dDtVencItRec, cTipoComi,:icodempvdadic, :scodfilialvdadic, :icodvendadic );
                I=I+1;
                /*Acumula as comissões adicionais para posteriormente descontar do valor principal*/
                nvlrcomiadic = nvlrcomiadic + nvlrcomiparc;

           /*     exception vdcomissaoex02 'rodou procedure para o vendedor:' || cast(:icodempvdadic as char(2)) || '-' || cast(:scodfilialvdadic as char(2)) || '-' || cast(:icodvendadic as char(2)) || '-' || ' - nvlrcomiadic:' || cast(nvlrcomiadic as char(20));*/

            end

        end

    end

    /*Comissionamento do vendedor principal*/

    I = 1;
    while (:I<=2) do
        begin
            if (I=1) then
                begin
                    ctipocomi='F';
                    nvlrcomi = cast( ( (nvlrcomiitrec - nvlrcomiadic ) * nPercFatClComis / 100 ) as numeric(15, 5) );
                end
            else
                begin
                    ctipocomi='R';
                    nvlrcomi = cast( ( (nvlrcomiitrec - nvlrcomiadic ) * nPercPgtoClComis / 100 ) as numeric(15, 5));
                end
/*
                exception vdcomissaoex01 ''
                || cast(:icodempvd as char(2)) || '-' || cast(:scodfilialvd as char(2)) || '-' || cast(:icodvend as char(2))
                || 'nvlrcomi:' || cast(:nvlrcomi as char(20))
                || 'nvlrvendacomi:' || cast(:nvlrvendacomi as char(20));
  */
            execute procedure vdadiccomissaosp(:icodemp, :scodfilial, :icodrec, :inparcitrec,
                :nvlrvendacomi, :nvlrcomi, :ddatacomi, :ddtcompcomi, :ddtvencitrec, ctipocomi, :icodempvd, :scodfilialvd, :icodvend );


            I=I+1;
        end

        suspend;
end
^

SET TERM ; ^

ALTER TABLE EQITMODGRADE ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODMODG POSITION 3;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODITMODG POSITION 4;

ALTER TABLE EQITMODGRADE ALTER COLUMN REFITMODG POSITION 5;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODEMPVG POSITION 6;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODFILIALVG POSITION 7;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODVARG POSITION 8;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODFABITMODG POSITION 9;

ALTER TABLE EQITMODGRADE ALTER COLUMN CODBARITMODG POSITION 10;

ALTER TABLE EQITMODGRADE ALTER COLUMN DESCITMODG POSITION 11;

ALTER TABLE EQITMODGRADE ALTER COLUMN DESCCOMPITMODG POSITION 12;

ALTER TABLE EQITMODGRADE ALTER COLUMN DTINS POSITION 13;

ALTER TABLE EQITMODGRADE ALTER COLUMN HINS POSITION 14;

ALTER TABLE EQITMODGRADE ALTER COLUMN IDUSUINS POSITION 15;

ALTER TABLE EQITMODGRADE ALTER COLUMN DTALT POSITION 16;

ALTER TABLE EQITMODGRADE ALTER COLUMN HALT POSITION 17;

ALTER TABLE EQITMODGRADE ALTER COLUMN IDUSUALT POSITION 18;

ALTER TABLE EQMODGRADE ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE EQMODGRADE ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE EQMODGRADE ALTER COLUMN CODMODG POSITION 3;

ALTER TABLE EQMODGRADE ALTER COLUMN CODEMPPD POSITION 4;

ALTER TABLE EQMODGRADE ALTER COLUMN CODFILIALPD POSITION 5;

ALTER TABLE EQMODGRADE ALTER COLUMN CODPROD POSITION 6;

ALTER TABLE EQMODGRADE ALTER COLUMN DESCMODG POSITION 7;

ALTER TABLE EQMODGRADE ALTER COLUMN DESCPRODMODG POSITION 8;

ALTER TABLE EQMODGRADE ALTER COLUMN DESCCOMPPRODMODG POSITION 9;

ALTER TABLE EQMODGRADE ALTER COLUMN REFMODG POSITION 10;

ALTER TABLE EQMODGRADE ALTER COLUMN CODFABMODG POSITION 11;

ALTER TABLE EQMODGRADE ALTER COLUMN CODBARMODG POSITION 12;

ALTER TABLE EQMODGRADE ALTER COLUMN DTINS POSITION 13;

ALTER TABLE EQMODGRADE ALTER COLUMN HINS POSITION 14;

ALTER TABLE EQMODGRADE ALTER COLUMN IDUSUINS POSITION 15;

ALTER TABLE EQMODGRADE ALTER COLUMN DTALT POSITION 16;

ALTER TABLE EQMODGRADE ALTER COLUMN HALT POSITION 17;

ALTER TABLE EQMODGRADE ALTER COLUMN IDUSUALT POSITION 18;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE EQPRODUTO ALTER COLUMN CODPROD POSITION 3;

ALTER TABLE EQPRODUTO ALTER COLUMN DESCPROD POSITION 4;

ALTER TABLE EQPRODUTO ALTER COLUMN REFPROD POSITION 5;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPAX POSITION 6;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALAX POSITION 7;

ALTER TABLE EQPRODUTO ALTER COLUMN CODALMOX POSITION 8;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPMA POSITION 9;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALMA POSITION 10;

ALTER TABLE EQPRODUTO ALTER COLUMN CODMOEDA POSITION 11;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPUD POSITION 12;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALUD POSITION 13;

ALTER TABLE EQPRODUTO ALTER COLUMN CODUNID POSITION 14;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPFC POSITION 15;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALFC POSITION 16;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFISC POSITION 17;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPMC POSITION 18;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALMC POSITION 19;

ALTER TABLE EQPRODUTO ALTER COLUMN CODMARCA POSITION 20;

ALTER TABLE EQPRODUTO ALTER COLUMN DESCAUXPROD POSITION 21;

ALTER TABLE EQPRODUTO ALTER COLUMN TIPOPROD POSITION 22;

ALTER TABLE EQPRODUTO ALTER COLUMN CVPROD POSITION 23;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPGP POSITION 24;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALGP POSITION 25;

ALTER TABLE EQPRODUTO ALTER COLUMN CODGRUP POSITION 26;

ALTER TABLE EQPRODUTO ALTER COLUMN CODBARPROD POSITION 27;

ALTER TABLE EQPRODUTO ALTER COLUMN CLOTEPROD POSITION 28;

ALTER TABLE EQPRODUTO ALTER COLUMN SERIEPROD POSITION 29;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFABPROD POSITION 30;

ALTER TABLE EQPRODUTO ALTER COLUMN COMISPROD POSITION 31;

ALTER TABLE EQPRODUTO ALTER COLUMN PESOLIQPROD POSITION 32;

ALTER TABLE EQPRODUTO ALTER COLUMN PESOBRUTPROD POSITION 33;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDMINPROD POSITION 34;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDMAXPROD POSITION 35;

ALTER TABLE EQPRODUTO ALTER COLUMN DTMPMPROD POSITION 36;

ALTER TABLE EQPRODUTO ALTER COLUMN CUSTOMPMPROD POSITION 37;

ALTER TABLE EQPRODUTO ALTER COLUMN CUSTOPEPSPROD POSITION 38;

ALTER TABLE EQPRODUTO ALTER COLUMN CUSTOINFOPROD POSITION 39;

ALTER TABLE EQPRODUTO ALTER COLUMN PRECOBASEPROD POSITION 40;

ALTER TABLE EQPRODUTO ALTER COLUMN PRECOCOMISPROD POSITION 41;

ALTER TABLE EQPRODUTO ALTER COLUMN SLDPROD POSITION 42;

ALTER TABLE EQPRODUTO ALTER COLUMN SLDRESPROD POSITION 43;

ALTER TABLE EQPRODUTO ALTER COLUMN SLDCONSIGPROD POSITION 44;

ALTER TABLE EQPRODUTO ALTER COLUMN SLDLIQPROD POSITION 45;

ALTER TABLE EQPRODUTO ALTER COLUMN ATIVOPROD POSITION 46;

ALTER TABLE EQPRODUTO ALTER COLUMN DTULTCPPROD POSITION 47;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDULTCPPROD POSITION 48;

ALTER TABLE EQPRODUTO ALTER COLUMN DESCCOMPPROD POSITION 49;

ALTER TABLE EQPRODUTO ALTER COLUMN OBSPROD POSITION 50;

ALTER TABLE EQPRODUTO ALTER COLUMN VERIFPROD POSITION 51;

ALTER TABLE EQPRODUTO ALTER COLUMN LOCALPROD POSITION 52;

ALTER TABLE EQPRODUTO ALTER COLUMN RMAPROD POSITION 53;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPPE POSITION 54;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALPE POSITION 55;

ALTER TABLE EQPRODUTO ALTER COLUMN CODPE POSITION 56;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPCC POSITION 57;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALCC POSITION 58;

ALTER TABLE EQPRODUTO ALTER COLUMN ANOCC POSITION 59;

ALTER TABLE EQPRODUTO ALTER COLUMN CODCC POSITION 60;

ALTER TABLE EQPRODUTO ALTER COLUMN USARECEITAPROD POSITION 61;

ALTER TABLE EQPRODUTO ALTER COLUMN USATELAADICPDV POSITION 62;

ALTER TABLE EQPRODUTO ALTER COLUMN VLRDENSIDADE POSITION 63;

ALTER TABLE EQPRODUTO ALTER COLUMN VLRCONCENT POSITION 64;

ALTER TABLE EQPRODUTO ALTER COLUMN COMPRIMENTO POSITION 65;

ALTER TABLE EQPRODUTO ALTER COLUMN LARGURA POSITION 66;

ALTER TABLE EQPRODUTO ALTER COLUMN ESPESSURA POSITION 67;

ALTER TABLE EQPRODUTO ALTER COLUMN GUIATRAFPROD POSITION 68;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDEMBALAGEM POSITION 69;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEANPROD POSITION 70;

ALTER TABLE EQPRODUTO ALTER COLUMN CUBAGEM POSITION 71;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPSC POSITION 72;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALSC POSITION 73;

ALTER TABLE EQPRODUTO ALTER COLUMN CODSECAO POSITION 74;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPTC POSITION 75;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALTC POSITION 76;

ALTER TABLE EQPRODUTO ALTER COLUMN CODTPCHAMADO POSITION 77;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDHORASSERV POSITION 78;

ALTER TABLE EQPRODUTO ALTER COLUMN NRODIASVALID POSITION 79;

ALTER TABLE EQPRODUTO ALTER COLUMN DESCCLI POSITION 80;

ALTER TABLE EQPRODUTO ALTER COLUMN QTDPORPLANO POSITION 81;

ALTER TABLE EQPRODUTO ALTER COLUMN NROPLANOS POSITION 82;

ALTER TABLE EQPRODUTO ALTER COLUMN CERTFSC POSITION 83;

ALTER TABLE EQPRODUTO ALTER COLUMN FATORFSC POSITION 84;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPOG POSITION 85;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALOG POSITION 86;

ALTER TABLE EQPRODUTO ALTER COLUMN CODPRODOG POSITION 87;

ALTER TABLE EQPRODUTO ALTER COLUMN CODEMPMG POSITION 88;

ALTER TABLE EQPRODUTO ALTER COLUMN CODFILIALMG POSITION 89;

ALTER TABLE EQPRODUTO ALTER COLUMN CODMODG POSITION 90;

ALTER TABLE EQPRODUTO ALTER COLUMN DTINS POSITION 91;

ALTER TABLE EQPRODUTO ALTER COLUMN HINS POSITION 92;

ALTER TABLE EQPRODUTO ALTER COLUMN IDUSUINS POSITION 93;

ALTER TABLE EQPRODUTO ALTER COLUMN DTALT POSITION 94;

ALTER TABLE EQPRODUTO ALTER COLUMN HALT POSITION 95;

ALTER TABLE EQPRODUTO ALTER COLUMN IDUSUALT POSITION 96;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAREFPROD POSITION 3;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV POSITION 4;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTM POSITION 5;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTM POSITION 6;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAPEDSEQ POSITION 7;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAORCSEQ POSITION 8;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILTRO POSITION 9;

ALTER TABLE SGPREFERE1 ALTER COLUMN USALIQREL POSITION 10;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOPRECOCUSTO POSITION 11;

ALTER TABLE SGPREFERE1 ALTER COLUMN ANOCENTROCUSTO POSITION 12;

ALTER TABLE SGPREFERE1 ALTER COLUMN OBSORCPAD POSITION 13;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV2 POSITION 14;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT2 POSITION 15;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT2 POSITION 16;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSORC POSITION 17;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSORCPD POSITION 18;

ALTER TABLE SGPREFERE1 ALTER COLUMN TITORCTXT01 POSITION 19;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV3 POSITION 20;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT3 POSITION 21;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT3 POSITION 22;

ALTER TABLE SGPREFERE1 ALTER COLUMN ORDNOTA POSITION 23;

ALTER TABLE SGPREFERE1 ALTER COLUMN SETORVENDA POSITION 24;

ALTER TABLE SGPREFERE1 ALTER COLUMN PREFCRED POSITION 25;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOPREFCRED POSITION 26;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPMO POSITION 27;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALMO POSITION 28;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODMOEDA POSITION 29;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV4 POSITION 30;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT4 POSITION 31;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT4 POSITION 32;

ALTER TABLE SGPREFERE1 ALTER COLUMN USACLASCOMIS POSITION 33;

ALTER TABLE SGPREFERE1 ALTER COLUMN PERCPRECOCUSTO POSITION 34;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODGRUP POSITION 35;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALGP POSITION 36;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPGP POSITION 37;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODMARCA POSITION 38;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALMC POSITION 39;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPMC POSITION 40;

ALTER TABLE SGPREFERE1 ALTER COLUMN RGCLIOBRIG POSITION 41;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABFRETEVD POSITION 42;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABADICVD POSITION 43;

ALTER TABLE SGPREFERE1 ALTER COLUMN TRAVATMNFVD POSITION 44;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOVALIDORC POSITION 45;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLIMESMOCNPJ POSITION 46;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTBJ POSITION 47;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTJ POSITION 48;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTJ POSITION 49;

ALTER TABLE SGPREFERE1 ALTER COLUMN CNPJOBRIGCLI POSITION 50;

ALTER TABLE SGPREFERE1 ALTER COLUMN JUROSPOSCALC POSITION 51;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPFR POSITION 52;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALFR POSITION 53;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFOR POSITION 54;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTN POSITION 55;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTN POSITION 56;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTRAN POSITION 57;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTF POSITION 58;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTF POSITION 59;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOFOR POSITION 60;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT5 POSITION 61;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT5 POSITION 62;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV5 POSITION 63;

ALTER TABLE SGPREFERE1 ALTER COLUMN ESTLOTNEG POSITION 64;

ALTER TABLE SGPREFERE1 ALTER COLUMN ESTNEG POSITION 65;

ALTER TABLE SGPREFERE1 ALTER COLUMN NATVENDA POSITION 66;

ALTER TABLE SGPREFERE1 ALTER COLUMN IPIVENDA POSITION 67;

ALTER TABLE SGPREFERE1 ALTER COLUMN CUSTOSICMS POSITION 68;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPPG POSITION 69;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALPG POSITION 70;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANOPAG POSITION 71;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTB POSITION 72;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTB POSITION 73;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTAB POSITION 74;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPCE POSITION 75;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALCE POSITION 76;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODCLASCLI POSITION 77;

ALTER TABLE SGPREFERE1 ALTER COLUMN CASASDEC POSITION 78;

ALTER TABLE SGPREFERE1 ALTER COLUMN CASASDECFIN POSITION 79;

ALTER TABLE SGPREFERE1 ALTER COLUMN COMISPDUPL POSITION 80;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT6 POSITION 81;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT6 POSITION 82;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV6 POSITION 83;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQVENDA POSITION 84;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQCOMPRA POSITION 85;

ALTER TABLE SGPREFERE1 ALTER COLUMN VENDAMATPRIM POSITION 86;

ALTER TABLE SGPREFERE1 ALTER COLUMN VENDAPATRIM POSITION 87;

ALTER TABLE SGPREFERE1 ALTER COLUMN PEPSPROD POSITION 88;

ALTER TABLE SGPREFERE1 ALTER COLUMN CNPJFOROBRIG POSITION 89;

ALTER TABLE SGPREFERE1 ALTER COLUMN INSCESTFOROBRIG POSITION 90;

ALTER TABLE SGPREFERE1 ALTER COLUMN BUSCAPRODSIMILAR POSITION 91;

ALTER TABLE SGPREFERE1 ALTER COLUMN MULTIALMOX POSITION 92;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT8 POSITION 93;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT8 POSITION 94;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV8 POSITION 95;

ALTER TABLE SGPREFERE1 ALTER COLUMN ESTNEGGRUP POSITION 96;

ALTER TABLE SGPREFERE1 ALTER COLUMN USATABPE POSITION 97;

ALTER TABLE SGPREFERE1 ALTER COLUMN TAMDESCPROD POSITION 98;

ALTER TABLE SGPREFERE1 ALTER COLUMN DESCCOMPPED POSITION 99;

ALTER TABLE SGPREFERE1 ALTER COLUMN OBSCLIVEND POSITION 100;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONTESTOQ POSITION 101;

ALTER TABLE SGPREFERE1 ALTER COLUMN DIASPEDT POSITION 102;

ALTER TABLE SGPREFERE1 ALTER COLUMN RECALCPCVENDA POSITION 103;

ALTER TABLE SGPREFERE1 ALTER COLUMN RECALCPCORC POSITION 104;

ALTER TABLE SGPREFERE1 ALTER COLUMN USALAYOUTPED POSITION 105;

ALTER TABLE SGPREFERE1 ALTER COLUMN VERIFALTPARCVENDA POSITION 106;

ALTER TABLE SGPREFERE1 ALTER COLUMN BUSCACODPRODGEN POSITION 107;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILBUSCGENPROD POSITION 108;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILBUSCGENREF POSITION 109;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILBUSCGENCODBAR POSITION 110;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILBUSCGENCODFAB POSITION 111;

ALTER TABLE SGPREFERE1 ALTER COLUMN FILBUSCGENCODFOR POSITION 112;

ALTER TABLE SGPREFERE1 ALTER COLUMN BUSCAVLRULTCOMPRA POSITION 113;

ALTER TABLE SGPREFERE1 ALTER COLUMN ICMSVENDA POSITION 114;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAPRECOZERO POSITION 115;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAIMGASSORC POSITION 116;

ALTER TABLE SGPREFERE1 ALTER COLUMN IMGASSORC POSITION 117;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTCPFCLI POSITION 118;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTEIECLI POSITION 119;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTEIEFOR POSITION 120;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTECPFFOR POSITION 121;

ALTER TABLE SGPREFERE1 ALTER COLUMN USANOMEVENDORC POSITION 122;

ALTER TABLE SGPREFERE1 ALTER COLUMN SISCONTABIL POSITION 123;

ALTER TABLE SGPREFERE1 ALTER COLUMN ATBANCOIMPBOL POSITION 124;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOCODBAR POSITION 125;

ALTER TABLE SGPREFERE1 ALTER COLUMN ADICORCOBSPED POSITION 126;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPMENSORC POSITION 127;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALMENSORC POSITION 128;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODMENSORC POSITION 129;

ALTER TABLE SGPREFERE1 ALTER COLUMN CUSTOCOMPRA POSITION 130;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABTRANSPCP POSITION 131;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABTRANSPORC POSITION 132;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABSOLCP POSITION 133;

ALTER TABLE SGPREFERE1 ALTER COLUMN ADICFRETEBASEICM POSITION 134;

ALTER TABLE SGPREFERE1 ALTER COLUMN PRECOCPREL POSITION 135;

ALTER TABLE SGPREFERE1 ALTER COLUMN DESCORC POSITION 136;

ALTER TABLE SGPREFERE1 ALTER COLUMN MULTICOMIS POSITION 137;

ALTER TABLE SGPREFERE1 ALTER COLUMN USUATIVCLI POSITION 138;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPHISTREC POSITION 139;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALHISTREC POSITION 140;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODHISTREC POSITION 141;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPHISTPAG POSITION 142;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALHISTPAG POSITION 143;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODHISTPAG POSITION 144;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTC POSITION 145;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTC POSITION 146;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOCLI POSITION 147;

ALTER TABLE SGPREFERE1 ALTER COLUMN ESTITRECALTDTVENC POSITION 148;

ALTER TABLE SGPREFERE1 ALTER COLUMN LCREDGLOBAL POSITION 149;

ALTER TABLE SGPREFERE1 ALTER COLUMN VDMANUTCOMOBRIG POSITION 150;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSPED POSITION 151;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSPED02 POSITION 152;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOCLASSPED POSITION 153;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAIBGECLI POSITION 154;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAIBGEFOR POSITION 155;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAIBGETRANSP POSITION 156;

ALTER TABLE SGPREFERE1 ALTER COLUMN SOMAVOLUMES POSITION 157;

ALTER TABLE SGPREFERE1 ALTER COLUMN BUSCACEP POSITION 158;

ALTER TABLE SGPREFERE1 ALTER COLUMN URLWSCEP POSITION 159;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSCP POSITION 160;

ALTER TABLE SGPREFERE1 ALTER COLUMN LABELOBS01CP POSITION 161;

ALTER TABLE SGPREFERE1 ALTER COLUMN LABELOBS02CP POSITION 162;

ALTER TABLE SGPREFERE1 ALTER COLUMN LABELOBS03CP POSITION 163;

ALTER TABLE SGPREFERE1 ALTER COLUMN LABELOBS04CP POSITION 164;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTEIEPF POSITION 165;

ALTER TABLE SGPREFERE1 ALTER COLUMN CREDICMSSIMPLES POSITION 166;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPMS POSITION 167;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALMS POSITION 168;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODMENSICMSSIMPLES POSITION 169;

ALTER TABLE SGPREFERE1 ALTER COLUMN GERACOMISVENDAORC POSITION 170;

ALTER TABLE SGPREFERE1 ALTER COLUMN GERACODUNIF POSITION 171;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOV9 POSITION 172;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALT9 POSITION 173;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPT9 POSITION 174;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPJP POSITION 175;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALJP POSITION 176;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANJP POSITION 177;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPJR POSITION 178;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALJR POSITION 179;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANJR POSITION 180;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPDR POSITION 181;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALDR POSITION 182;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANDR POSITION 183;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPDC POSITION 184;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALDC POSITION 185;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANDC POSITION 186;

ALTER TABLE SGPREFERE1 ALTER COLUMN GERAPAGEMIS POSITION 187;

ALTER TABLE SGPREFERE1 ALTER COLUMN LANCAFINCONTR POSITION 188;

ALTER TABLE SGPREFERE1 ALTER COLUMN LANCARMACONTR POSITION 189;

ALTER TABLE SGPREFERE1 ALTER COLUMN CASASDECPRE POSITION 190;

ALTER TABLE SGPREFERE1 ALTER COLUMN VISUALIZALUCR POSITION 191;

ALTER TABLE SGPREFERE1 ALTER COLUMN CLASSNFE POSITION 192;

ALTER TABLE SGPREFERE1 ALTER COLUMN DIRNFE POSITION 193;

ALTER TABLE SGPREFERE1 ALTER COLUMN DIRNFELIN POSITION 194;

ALTER TABLE SGPREFERE1 ALTER COLUMN FORMATODANFE POSITION 195;

ALTER TABLE SGPREFERE1 ALTER COLUMN AMBIENTENFE POSITION 196;

ALTER TABLE SGPREFERE1 ALTER COLUMN PROCEMINFE POSITION 197;

ALTER TABLE SGPREFERE1 ALTER COLUMN VERPROCNFE POSITION 198;

ALTER TABLE SGPREFERE1 ALTER COLUMN KEYLICNFE POSITION 199;

ALTER TABLE SGPREFERE1 ALTER COLUMN DTVENCTONFE POSITION 200;

ALTER TABLE SGPREFERE1 ALTER COLUMN INFADPRODNFE POSITION 201;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPNF POSITION 202;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALNF POSITION 203;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMAILNF POSITION 204;

ALTER TABLE SGPREFERE1 ALTER COLUMN EXIBEPARCOBSDANFE POSITION 205;

ALTER TABLE SGPREFERE1 ALTER COLUMN VERSAONFE POSITION 206;

ALTER TABLE SGPREFERE1 ALTER COLUMN REGIMETRIBNFE POSITION 207;

ALTER TABLE SGPREFERE1 ALTER COLUMN INFCPDEVOLUCAO POSITION 208;

ALTER TABLE SGPREFERE1 ALTER COLUMN INFVDREMESSA POSITION 209;

ALTER TABLE SGPREFERE1 ALTER COLUMN GERARECEMIS POSITION 210;

ALTER TABLE SGPREFERE1 ALTER COLUMN RETENSAOIMP POSITION 211;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOCUSTOLUC POSITION 212;

ALTER TABLE SGPREFERE1 ALTER COLUMN TABIMPORTCP POSITION 213;

ALTER TABLE SGPREFERE1 ALTER COLUMN HABVLRTOTITORC POSITION 214;

ALTER TABLE SGPREFERE1 ALTER COLUMN USABUSCAGENPRODCP POSITION 215;

ALTER TABLE SGPREFERE1 ALTER COLUMN ADICOBSORCPED POSITION 216;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAPRECOCOT POSITION 217;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQPRECOAPROV POSITION 218;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPFT POSITION 219;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALFT POSITION 220;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOFORFT POSITION 221;

ALTER TABLE SGPREFERE1 ALTER COLUMN USAPRECOCOMIS POSITION 222;

ALTER TABLE SGPREFERE1 ALTER COLUMN ESPECIALCOMIS POSITION 223;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALTS POSITION 224;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOVS POSITION 225;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPTS POSITION 226;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPSV POSITION 227;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALSV POSITION 228;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANOPAGSV POSITION 229;

ALTER TABLE SGPREFERE1 ALTER COLUMN ARREDPRECO POSITION 230;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPPC POSITION 231;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALPC POSITION 232;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODPLANPC POSITION 233;

ALTER TABLE SGPREFERE1 ALTER COLUMN TPNOSSONUMERO POSITION 234;

ALTER TABLE SGPREFERE1 ALTER COLUMN IMPDOCBOL POSITION 235;

ALTER TABLE SGPREFERE1 ALTER COLUMN FECHACAIXA POSITION 236;

ALTER TABLE SGPREFERE1 ALTER COLUMN FECHACAIXAAUTO POSITION 237;

ALTER TABLE SGPREFERE1 ALTER COLUMN NUMDIGIDENTTIT POSITION 238;

ALTER TABLE SGPREFERE1 ALTER COLUMN KEYLICEFD POSITION 239;

ALTER TABLE SGPREFERE1 ALTER COLUMN DTVENCTOEFD POSITION 240;

ALTER TABLE SGPREFERE1 ALTER COLUMN REVALIDARLOTECOMPRA POSITION 241;

ALTER TABLE SGPREFERE1 ALTER COLUMN ENCORCPROD POSITION 242;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPIM POSITION 243;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALIM POSITION 244;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOVIM POSITION 245;

ALTER TABLE SGPREFERE1 ALTER COLUMN COMISSAODESCONTO POSITION 246;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPHC POSITION 247;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALHC POSITION 248;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODHISTCNAB POSITION 249;

ALTER TABLE SGPREFERE1 ALTER COLUMN ALINHATELALANCA POSITION 250;

ALTER TABLE SGPREFERE1 ALTER COLUMN VENDACONSUM POSITION 251;

ALTER TABLE SGPREFERE1 ALTER COLUMN CVPROD POSITION 252;

ALTER TABLE SGPREFERE1 ALTER COLUMN VERIFPROD POSITION 253;

ALTER TABLE SGPREFERE1 ALTER COLUMN RMAPROD POSITION 254;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOPROD POSITION 255;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPIG POSITION 256;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALIG POSITION 257;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODIMG POSITION 258;

ALTER TABLE SGPREFERE1 ALTER COLUMN OBSITVENDAPED POSITION 259;

ALTER TABLE SGPREFERE1 ALTER COLUMN FATORCPARC POSITION 260;

ALTER TABLE SGPREFERE1 ALTER COLUMN APROVORCFATPARC POSITION 261;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQSEQICP POSITION 262;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQSEQIVD POSITION 263;

ALTER TABLE SGPREFERE1 ALTER COLUMN UTILORDCPINT POSITION 264;

ALTER TABLE SGPREFERE1 ALTER COLUMN KEYLICEPC POSITION 265;

ALTER TABLE SGPREFERE1 ALTER COLUMN DTVENCTOEPC POSITION 266;

ALTER TABLE SGPREFERE1 ALTER COLUMN IMPLOTENFE POSITION 267;

ALTER TABLE SGPREFERE1 ALTER COLUMN TOTCPSFRETE POSITION 268;

ALTER TABLE SGPREFERE1 ALTER COLUMN IDENTCLIBCO POSITION 269;

ALTER TABLE SGPREFERE1 ALTER COLUMN QTDDESC POSITION 270;

ALTER TABLE SGPREFERE1 ALTER COLUMN LOCALSERV POSITION 271;

ALTER TABLE SGPREFERE1 ALTER COLUMN VDPRODQQCLAS POSITION 272;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPVD POSITION 273;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALVD POSITION 274;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODVEND POSITION 275;

ALTER TABLE SGPREFERE1 ALTER COLUMN PADRAONFE POSITION 276;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPME POSITION 277;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALME POSITION 278;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODMENSVENDA POSITION 279;

ALTER TABLE SGPREFERE1 ALTER COLUMN TIPOEMISSAONFE POSITION 280;

ALTER TABLE SGPREFERE1 ALTER COLUMN CCNFECP POSITION 281;

ALTER TABLE SGPREFERE1 ALTER COLUMN ADICICMSTOTNOTA POSITION 282;

ALTER TABLE SGPREFERE1 ALTER COLUMN UTILIZATBCALCCA POSITION 283;

ALTER TABLE SGPREFERE1 ALTER COLUMN HABCOMPRACOMPL POSITION 284;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODEMPIC POSITION 285;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODFILIALIC POSITION 286;

ALTER TABLE SGPREFERE1 ALTER COLUMN CODTIPOMOVIC POSITION 287;

ALTER TABLE SGPREFERE1 ALTER COLUMN DESCNATCOMPL POSITION 288;

ALTER TABLE SGPREFERE1 ALTER COLUMN HABLOGPAGAR POSITION 289;

ALTER TABLE SGPREFERE1 ALTER COLUMN HABLOGRECEBER POSITION 290;

ALTER TABLE SGPREFERE1 ALTER COLUMN CONSISTENDENTVD POSITION 291;

ALTER TABLE SGPREFERE1 ALTER COLUMN USACLISEQ POSITION 292;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQDESCCOMPORC POSITION 293;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQPRECOORC POSITION 294;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQDESCCOMPVD POSITION 295;

ALTER TABLE SGPREFERE1 ALTER COLUMN BLOQPRECOVD POSITION 296;

ALTER TABLE SGPREFERE1 ALTER COLUMN DESABDESCFECHAVD POSITION 297;

ALTER TABLE SGPREFERE1 ALTER COLUMN DESABDESCFECHAORC POSITION 298;

ALTER TABLE SGPREFERE1 ALTER COLUMN PERMITBAIXAPARCJDM POSITION 299;

ALTER TABLE SGPREFERE1 ALTER COLUMN DTINS POSITION 300;

ALTER TABLE SGPREFERE1 ALTER COLUMN HINS POSITION 301;

ALTER TABLE SGPREFERE1 ALTER COLUMN IDUSUINS POSITION 302;

ALTER TABLE SGPREFERE1 ALTER COLUMN DTALT POSITION 303;

ALTER TABLE SGPREFERE1 ALTER COLUMN HALT POSITION 304;

ALTER TABLE SGPREFERE1 ALTER COLUMN IDUSUALT POSITION 305;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODPROD POSITION 3;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODPRECOPROD POSITION 4;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODEMPTB POSITION 5;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODFILIALTB POSITION 6;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODTAB POSITION 7;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODEMPCC POSITION 8;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODFILIALCC POSITION 9;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODCLASCLI POSITION 10;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODEMPPG POSITION 11;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODFILIALPG POSITION 12;

ALTER TABLE VDPRECOPROD ALTER COLUMN CODPLANOPAG POSITION 13;

ALTER TABLE VDPRECOPROD ALTER COLUMN PRECOPROD POSITION 14;

ALTER TABLE VDPRECOPROD ALTER COLUMN TIPOPRECOPROD POSITION 15;

ALTER TABLE VDPRECOPROD ALTER COLUMN DTALTPRECO POSITION 16;

ALTER TABLE VDPRECOPROD ALTER COLUMN HALTPRECO POSITION 17;

ALTER TABLE VDPRECOPROD ALTER COLUMN PRECOANT POSITION 18;

ALTER TABLE VDPRECOPROD ALTER COLUMN IDUSUALTPRECO POSITION 19;

ALTER TABLE VDPRECOPROD ALTER COLUMN ATIVOPRECOPROD POSITION 20;

ALTER TABLE VDPRECOPROD ALTER COLUMN DTINS POSITION 21;

ALTER TABLE VDPRECOPROD ALTER COLUMN HINS POSITION 22;

ALTER TABLE VDPRECOPROD ALTER COLUMN IDUSUINS POSITION 23;

ALTER TABLE VDPRECOPROD ALTER COLUMN DTALT POSITION 24;

ALTER TABLE VDPRECOPROD ALTER COLUMN HALT POSITION 25;

ALTER TABLE VDPRECOPROD ALTER COLUMN IDUSUALT POSITION 26;


COMMIT WORK;

/* Server Version: LI-V6.3.4.4910 Firebird 1.5.  ODS Version: 10.1. */
SET NAMES NONE;

SET SQL DIALECT 3;

--CONNECT 'localhost:/opt/firebird/dados/desenv/freedom1.2.5.5.fdb' USER 'SYSDBA' PASSWORD '123654' ROLE 'ADM';

SET AUTODDL ON;

/* Drop Constraints... */
--CONNECT 'localhost:/opt/firebird/dados/desenv/freedom1.2.5.5.fdb' USER 'SYSDBA' PASSWORD '123654' ROLE 'ADM';

ALTER TABLE VDITCONTRATOAND DROP CONSTRAINT VDIDCONTRATOANDPK;



ALTER TABLE EQTIPOMOV ADD DESBLOQCV CHAR(1) DEFAULT 'N' NOT NULL;

/* Create Table... */
CREATE TABLE VDITCONTRATOFOR(CODEMP INTEGER NOT NULL,
CODFILIAL SMALLINT NOT NULL,
CODCONTR INTEGER NOT NULL,
CODITCONTR SMALLINT NOT NULL,
SEQICF SMALLINT NOT NULL,
CODEMPFR INTEGER NOT NULL,
CODFILIALFR SMALLINT NOT NULL,
CODFOR INTEGER NOT NULL,
VLRAPAGFOR DECIMAL(15,5) DEFAULT 0 NOT NULL,
DTPREVINIFOR DATE,
DTPREVFINFOR DATE,
DTINS DATE DEFAULT 'now' NOT NULL,
HINS TIME DEFAULT 'now' NOT NULL,
IDUSUINS VARCHAR(128) DEFAULT USER NOT NULL,
DTALT DATE DEFAULT 'now' NOT NULL,
HALT TIME DEFAULT 'now' NOT NULL,
IDUSUALT VARCHAR(128) DEFAULT USER NOT NULL);



/* Create Primary Key... */
ALTER TABLE VDITCONTRATOAND ADD CONSTRAINT VDITCONTRATOANDPK PRIMARY KEY (CODCONTR,CODITCONTR,SEQAND,CODFILIAL,CODEMP);

ALTER TABLE VDITCONTRATOFOR ADD CONSTRAINT VDITCONTRATOFORPK PRIMARY KEY (CODCONTR,CODITCONTR,SEQICF);

/* Create Foreign Key... */
--CONNECT 'localhost:/opt/firebird/dados/desenv/freedom1.2.5.5.fdb' USER 'SYSDBA' PASSWORD '123654' ROLE 'ADM';

ALTER TABLE VDITCONTRATOFOR ADD CONSTRAINT VDITCONTRAFORFKFOR FOREIGN KEY (CODFOR,CODFILIALFR,CODEMP) REFERENCES CPFORNECED(CODFOR,CODFILIAL,CODEMP);

ALTER TABLE VDITCONTRATOFOR ADD CONSTRAINT VDITCONTRAFORFKVDI FOREIGN KEY (CODCONTR,CODITCONTR,CODFILIAL,CODEMP) REFERENCES VDITCONTRATO(CODCONTR,CODITCONTR,CODFILIAL,CODEMP);

/* Alter Procedure... */
/* empty dependent procedure body */
/* Clear: EQMOVPRODDSP for: EQMOVPRODPRCSLDSP */
/* AssignEmptyBody proc */
SET TERM ^ ;

ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
 BEGIN EXIT; END
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODISP for: EQMOVPRODPRCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODUSP for: EQMOVPRODPRCSLDSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter (EQMOVPRODPRCSLDSP) */
ALTER PROCEDURE EQMOVPRODPRCSLDSP(SCODFILIAL SMALLINT,
ICODMOVPROD INTEGER,
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
DDTMOVPROD DATE,
DDTMOVPRODPRC DATE,
NSLDMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPRODAX NUMERIC(15,5),
NCUSTOMPMMOVPRODAX NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1))
 RETURNS(NSLDPRC NUMERIC(15,5),
NCUSTOMPMPRC NUMERIC(15,5),
NSLDPRCAX NUMERIC(15,5),
NCUSTOMPMPRCAX NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable nqtdmovprod numeric(15,5);
declare variable nprecomovprod numeric(15,5);
declare variable icodmovprodprc integer;
declare variable cestoqmovprod char(1);
declare variable icodempaxprc integer;
declare variable scodfilialaxprc smallint;
declare variable icodalmoxprc integer;
begin
  /* Procedure de processamento de estoque */
  FOR SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV ,
    MP.QTDMOVPROD, MP.PRECOMOVPROD , MP.CODMOVPROD,
    MP.CODEMPAX, MP.CODFILIALAX, MP.CODALMOX, MP.ESTOQMOVPROD
    FROM EQMOVPROD MP
    WHERE MP.CODEMPPD=:ICODEMPPD AND MP.CODFILIALPD=:SCODFILIALPD AND
       MP.CODPROD=:ICODPROD AND MP.CODEMP=:ICODEMPPD AND MP.CODFILIAL=:SCODFILIAL AND
       ( (MP.DTMOVPROD = :DDTMOVPROD AND MP.CODMOVPROD > :ICODMOVPROD) OR
         (MP.DTMOVPROD>:DDTMOVPROD) ) AND  /* ALTEREI AQUI */
       ( (:DDTMOVPRODPRC IS NULL /* AND MP.CODMOVPROD!=:ICODMOVPROD */) OR
         (MP.DTMOVPROD = :DDTMOVPRODPRC AND MP.CODMOVPROD < :ICODMOVPROD) OR
         (MP.DTMOVPROD < :DDTMOVPRODPRC) )
    ORDER BY MP.DTMOVPROD, MP.CODMOVPROD
    INTO :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
     :NQTDMOVPROD, :NPRECOMOVPROD, :ICODMOVPRODPRC,
     :ICODEMPAXPRC, :SCODFILIALAXPRC, :ICODALMOXPRC, :ESTOQTIPOMOVPD DO
  BEGIN
      SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
        :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD;
      if (CMULTIALMOX='N') then /* Se não for multi almoxarifado*/
      begin
         NSLDMOVPRODAX = NSLDMOVPROD;
         NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
         UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else if (ICODEMPAX=ICODEMPAXPRC AND SCODFILIALAX=SCODFILIALAXPRC AND
          ICODALMOX=ICODALMOXPRC) then
          /* Se for multi almoxarifado e o código do almoxarifado for o mesmo*/
      begin
        SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
            :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
            INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else /* Se for multi almoxarifado não atualiza almoxarifado diferente */
      begin
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      NSLDPRC = NSLDMOVPROD;
      NCUSTOMPMPRC = NCUSTOMPMMOVPROD;
      NSLDPRCAX = NSLDMOVPRODAX;
      NCUSTOMPMPRCAX = NCUSTOMPMMOVPRODAX;
  END
  suspend;
end
^

/* empty dependent procedure body */
/* Clear: EQMOVPRODIUDSP for: EQMOVPRODUSP */
/* AssignEmptyBody proc */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
 BEGIN EXIT; END
^

/* Alter (EQMOVPRODUSP) */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldprc numeric(15,5);
declare variable ncustompmprc numeric(15,5);
declare variable nsldprcax numeric(15,5);
declare variable ncustompmprcax numeric(15,5);
declare variable nsldlc numeric(15,5);
declare variable ncustompmlc numeric(15,5);
declare variable nsldlcax numeric(15,5);
declare variable ncustompmlcax numeric(15,5);
declare variable ddtmovprodold date;
declare variable nprecomovprodold numeric(15,5);
declare variable nqtdmovprodold numeric(15,5);
declare variable icodemptmold integer;
declare variable scodfilialtmold smallint;
declare variable icodtipomovold integer;
declare variable calttm char(1);
declare variable ddtprc date;
declare variable ddtprcate date;
declare variable cestoqmovprod char(1);
begin
  /* Procedure de atualização da tabela eqmovprod */

  DDTPRCATE = NULL; /* Até onde deve ser processando o estoque */
 /* localiza movprod */

-- execute procedure sgdebugsp('antes da atualização...','no inicio');

  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
    FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
      :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
      :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM,
      :ICODRMA, :SCODITRMA, :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

--  traz valores antigos

  SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV, MP.DTMOVPROD,
       MP.PRECOMOVPROD, MP.QTDMOVPROD  FROM EQMOVPROD MP
     WHERE MP.CODEMP=:ICODEMP AND MP.CODFILIAL=:SCODFILIAL AND MP.CODMOVPROD=:ICODMOVPROD
     INTO :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD, :DDTMOVPRODOLD,
       :NPRECOMOVPRODOLD, :NQTDMOVPRODOLD;

   /* abaixo verificação se a alteração de tipo de movimento mexe no estoque */
   SELECT CALTTM FROM EQMOVPRODCKUTMSP(:ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
      :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD) INTO :CALTTM;

   /* verifica se há relevância para reprocessamento */
   if ( (DDTMOVPROD!=DDTMOVPRODOLD) OR (CALTTM='S') OR
        (NPRECOMOVPROD!=NPRECOMOVPRODOLD) OR (NQTDMOVPROD!=NQTDMOVPRODOLD) ) then
   begin

   -- execute procedure sgdebugsp('entrou no if','1');


      if ( DDTMOVPRODOLD IS NULL) then
         DDTMOVPRODOLD = DDTMOVPROD; /* garantir que a data antiga não e nula; */
      /* verifica qual data é menor para reprocessamento */
      if ( DDTMOVPROD<=DDTMOVPRODOLD ) then
      begin

     -- execute procedure sgdebugsp('entrou no if','2');

          DDTPRC = DDTMOVPROD;
          if (DDTMOVPROD=DDTMOVPRODOLD) then
             DDTPRCATE = null;
          else
             DDTPRCATE = DDTMOVPRODOLD;
/*          verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, :NPRECOMOVPROD, :NPRECOMOVPROD,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRC, :NSLDPRC, :ESTOQTIPOMOVPD)
              INTO :NSLDPRC, :NCUSTOMPMPRC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
              NSLDPRCAX = NSLDPRC;
              NCUSTOMPMPRCAX = NCUSTOMPMPRC;
          end
          else
          begin
          SELECT NSALDO, NCUSTOMPM
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRCAX, :NSLDPRCAX, :ESTOQTIPOMOVPD)
              INTO :NSLDPRCAX, :NCUSTOMPMPRCAX;
          end
          NCUSTOMPMLC = NCUSTOMPMPRC;
          NSLDLC = NSLDPRC;
          NCUSTOMPMLCAX = NCUSTOMPMPRCAX;
          NSLDLCAX = NSLDPRCAX;
      end
      else
      begin
          DDTPRC = DDTMOVPRODOLD;
          DDTPRCATE = DDTMOVPROD;
          /* verifica lançamento anterior e traz custo e saldo */

       --   execute procedure sgdebugsp('entrou no else','3');

          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, 0, 0,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMLC, :NCUSTOMPMLCAX,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDLC, :NCUSTOMPMLC, :NSLDLCAX, :NCUSTOMPMLCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
              :NCUSTOMPMLC, :NSLDLC, :ESTOQTIPOMOVPD)
              INTO :NSLDLC, :NCUSTOMPMLC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
             NSLDLCAX = NSLDLC;
             NCUSTOMPMLCAX = NCUSTOMPMLC;
          end
          else
          begin
              SELECT NSALDO, NCUSTOMPM
                  FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
                  :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
                  :NCUSTOMPMLCAX, :NSLDLCAX, :ESTOQTIPOMOVPD)
                  INTO :NSLDLCAX, :NCUSTOMPMLCAX;
          end

      end

       SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
        FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
          :SCODFILIALPD, :ICODPROD, :DDTPRC, :DDTPRCATE, :NSLDPRC,
          :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX,
          :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
        INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX;

      UPDATE EQMOVPROD SET DTMOVPROD=:DDTMOVPROD,
         QTDMOVPROD=:NQTDMOVPROD, PRECOMOVPROD=:NPRECOMOVPROD,
         SLDMOVPROD=:NSLDLC, CUSTOMPMMOVPROD=:NCUSTOMPMLC,
         SLDMOVPRODAX=:NSLDLCAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMLCAX,
         FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE, ESTOQMOVPROD=:CESTOQMOVPROD ,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
   end
   else /*  caso não tenha nenhuma alteração relevânte para processamento */

  --  execute procedure sgdebugsp('antes do reprocessamento','5SG');

      UPDATE EQMOVPROD SET FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
end
^

/* Alter (SGRETVERSAO) */
ALTER PROCEDURE SGRETVERSAO RETURNS(VERSAO VARCHAR(30))
 AS
begin
    versao = '1.2.5.6 (30/01/2013)';
    suspend;
end
^

/* Restore procedure body: EQMOVPRODDSP */
ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de deleção da tabela eqmovprod */
  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
  FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
    :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
    :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM, :ICODRMA,
    :SCODITRMA, :ICODEMPOP,  :SCODFILIALOP,  :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
  FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD,
   :ICODEMPPD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0, 0,
   :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX  ;

  /* DELETAR EQMOVPROD */
  DELETE FROM EQMOVPROD WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL
    AND CODMOVPROD=:ICODMOVPROD;

  /* REPROCESSAR ESTOQUE */
  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
      :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
      :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
      :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;

  /* ATUALIZA CUSTO NO CADASTRO DE PRODUTOS
   OPERADOR 1 PARA EFETUAR A ATUALIZAÇÃO SEMPRE
  EXECUTE PROCEDURE EQMOVPRODATCUSTSP( 1, :ICODEMP, :SCODFILIAL,
   :ICODMOVPROD,  :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0);
   */

  suspend;
end
^

/* Restore procedure body: EQMOVPRODISP */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable cestoqmovprod char(1);
declare variable ctipomovprod char(1);
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable soperador smallint;
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de inserção na tabela eqmovprod */

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX FROM EQMOVPRODSLDSP(null, null, null, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NPRECOMOVPROD, :NPRECOMOVPROD,
     :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX )
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

  /* Verifica se haverá mudança de saldo*/
  SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD, CTIPOMOVPROD, SOPERADOR FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
      :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :SOPERADOR;

  if (CMULTIALMOX='N') then
  begin
     NSLDMOVPRODAX = NSLDMOVPROD;
     NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
  end
  else
  begin
      SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
          :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
        INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
  end

  SELECT SCODFILIAL, ICODMOVPROD FROM EQMOVPRODSEQSP(:ICODEMPPD)
     INTO :SCODFILIAL, :ICODMOVPROD;  /* encontra o próximo código e a filial*/

   INSERT INTO EQMOVPROD ( CODEMP, CODFILIAL, CODMOVPROD,
      CODEMPPD, CODFILIALPD , CODPROD , CODEMPLE ,
      CODFILIALLE , CODLOTE , CODEMPTM, CODFILIALTM,
      CODTIPOMOV, CODEMPIV , CODFILIALIV , CODINVPROD ,
      CODEMPCP , CODFILIALCP , CODCOMPRA , CODITCOMPRA , CODEMPVD ,
      CODFILIALVD , TIPOVENDA , CODVENDA , CODITVENDA , CODEMPRM ,
      CODFILIALRM , CODRMA , CODITRMA ,
      CODEMPOP, CODFILIALOP, CODOP, SEQOP, SEQENTOP,
      CODEMPNT , CODFILIALNT ,
      CODNAT , DTMOVPROD , DOCMOVPROD , FLAG , QTDMOVPROD ,
      PRECOMOVPROD, ESTOQMOVPROD, TIPOMOVPROD, SLDMOVPROD, CUSTOMPMMOVPROD,
      SLDMOVPRODAX, CUSTOMPMMOVPRODAX, CODEMPAX, CODFILIALAX, CODALMOX, seqsubprod )
   VALUES ( :ICODEMPPD, :SCODFILIAL, :ICODMOVPROD,
    :ICODEMPPD , :SCODFILIALPD , :ICODPROD , :ICODEMPLE ,
    :SCODFILIALLE , :CCODLOTE , :ICODEMPTM, :SCODFILIALTM,
    :ICODTIPOMOV, :ICODEMPIV , :SCODFILIALIV ,
    :ICODINVPROD , :ICODEMPCP , :SCODFILIALCP , :ICODCOMPRA ,
    :SCODITCOMPRA , :ICODEMPVD , :SCODFILIALVD , :CTIPOVENDA ,
    :ICODVENDA , :SCODITVENDA , :ICODEMPRM , :SCODFILIALRM ,
    :ICODRMA , :SCODITRMA , :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop,
    :ICODEMPNT , :SCODFILIALNT , :CCODNAT ,
    :DDTMOVPROD , :IDOCMOVPROD , :CFLAG , :NQTDMOVPROD ,
    :NPRECOMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
    :NSLDMOVPRODAX,  :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :seqsubprod );

  /* REPROCESSAR ESTOQUE */

  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
     :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
     :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

 /* ATUALIZA O CUSTO NO CADASTRO DE PRODUTOS
   EXECUTE PROCEDURE EQMOVPRODATCUSTSP(:SOPERADOR, :ICODEMPPD, :SCODFILIAL,
    :ICODMOVPROD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMMOVPROD); 
 */


  suspend;
end
^

/* Restore procedure body: EQMOVPRODIUDSP */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable cmultialmox char(1);
begin
  /* Procedure que controle INSERT, UPDATE E DELETE da tabela eqmovprod */

  /* Linha incluida para passar como parâmetro se é multi almoxarifado
      Como o objetivo de evitar I/O
  */
  SELECT CMULTIALMOX FROM SGRETMULTIALMOXSP(:ICODEMPPD) INTO :CMULTIALMOX;
  
  if (CIUD='I') then /* SE FOR INSERT */
     execute procedure EQMOVPRODISP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod, :estoqtipomovpd);
  else if (CIUD='U') then
     execute procedure EQMOVPRODUSP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX,:seqsubprod, :estoqtipomovpd);
  else if (CIUD='D') then
     execute procedure EQMOVPRODDSP( ICODEMPPD, SCODFILIALPD, ICODPROD, ICODEMPIV,
         SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA, SCODITCOMPRA,
         ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         DDTMOVPROD, ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod );
--  suspend;
end
^

/* Alter Procedure... */
/* Alter (EQMOVPRODDSP) */
ALTER PROCEDURE EQMOVPRODDSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
DDTMOVPROD DATE,
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT)
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de deleção da tabela eqmovprod */
  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
  FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
    :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
    :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM, :ICODRMA,
    :SCODITRMA, :ICODEMPOP,  :SCODFILIALOP,  :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
  FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD,
   :ICODEMPPD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0, 0,
   :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX  ;

  /* DELETAR EQMOVPROD */
  DELETE FROM EQMOVPROD WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL
    AND CODMOVPROD=:ICODMOVPROD;

  /* REPROCESSAR ESTOQUE */
  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
      :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
      :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
      :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;

  /* ATUALIZA CUSTO NO CADASTRO DE PRODUTOS
   OPERADOR 1 PARA EFETUAR A ATUALIZAÇÃO SEMPRE
  EXECUTE PROCEDURE EQMOVPRODATCUSTSP( 1, :ICODEMP, :SCODFILIAL,
   :ICODMOVPROD,  :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, 0);
   */

  suspend;
end
^

/* Alter (EQMOVPRODISP) */
ALTER PROCEDURE EQMOVPRODISP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable cestoqmovprod char(1);
declare variable ctipomovprod char(1);
declare variable nsldmovprod numeric(15,5);
declare variable ncustompmmovprod numeric(15,5);
declare variable soperador smallint;
declare variable nsldmovprodax numeric(15,5);
declare variable ncustompmmovprodax numeric(15,5);
begin
  /* Procedure de inserção na tabela eqmovprod */

  SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX FROM EQMOVPRODSLDSP(null, null, null, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NPRECOMOVPROD, :NPRECOMOVPROD,
     :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX )
     INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

  /* Verifica se haverá mudança de saldo*/
  SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD, CTIPOMOVPROD, SOPERADOR FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
      :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :SOPERADOR;

  if (CMULTIALMOX='N') then
  begin
     NSLDMOVPRODAX = NSLDMOVPROD;
     NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
  end
  else
  begin
      SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
          :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
        INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
  end

  SELECT SCODFILIAL, ICODMOVPROD FROM EQMOVPRODSEQSP(:ICODEMPPD)
     INTO :SCODFILIAL, :ICODMOVPROD;  /* encontra o próximo código e a filial*/

   INSERT INTO EQMOVPROD ( CODEMP, CODFILIAL, CODMOVPROD,
      CODEMPPD, CODFILIALPD , CODPROD , CODEMPLE ,
      CODFILIALLE , CODLOTE , CODEMPTM, CODFILIALTM,
      CODTIPOMOV, CODEMPIV , CODFILIALIV , CODINVPROD ,
      CODEMPCP , CODFILIALCP , CODCOMPRA , CODITCOMPRA , CODEMPVD ,
      CODFILIALVD , TIPOVENDA , CODVENDA , CODITVENDA , CODEMPRM ,
      CODFILIALRM , CODRMA , CODITRMA ,
      CODEMPOP, CODFILIALOP, CODOP, SEQOP, SEQENTOP,
      CODEMPNT , CODFILIALNT ,
      CODNAT , DTMOVPROD , DOCMOVPROD , FLAG , QTDMOVPROD ,
      PRECOMOVPROD, ESTOQMOVPROD, TIPOMOVPROD, SLDMOVPROD, CUSTOMPMMOVPROD,
      SLDMOVPRODAX, CUSTOMPMMOVPRODAX, CODEMPAX, CODFILIALAX, CODALMOX, seqsubprod )
   VALUES ( :ICODEMPPD, :SCODFILIAL, :ICODMOVPROD,
    :ICODEMPPD , :SCODFILIALPD , :ICODPROD , :ICODEMPLE ,
    :SCODFILIALLE , :CCODLOTE , :ICODEMPTM, :SCODFILIALTM,
    :ICODTIPOMOV, :ICODEMPIV , :SCODFILIALIV ,
    :ICODINVPROD , :ICODEMPCP , :SCODFILIALCP , :ICODCOMPRA ,
    :SCODITCOMPRA , :ICODEMPVD , :SCODFILIALVD , :CTIPOVENDA ,
    :ICODVENDA , :SCODITVENDA , :ICODEMPRM , :SCODFILIALRM ,
    :ICODRMA , :SCODITRMA , :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop,
    :ICODEMPNT , :SCODFILIALNT , :CCODNAT ,
    :DDTMOVPROD , :IDOCMOVPROD , :CFLAG , :NQTDMOVPROD ,
    :NPRECOMOVPROD, :CESTOQMOVPROD, :CTIPOMOVPROD, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
    :NSLDMOVPRODAX,  :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :seqsubprod );

  /* REPROCESSAR ESTOQUE */

  SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
    FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
     :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, null, :NSLDMOVPROD, :NCUSTOMPMMOVPROD,
     :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX, :ICODEMPAX, :SCODFILIALAX, :ICODALMOX,
     :CMULTIALMOX)
    INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX ;

 /* ATUALIZA O CUSTO NO CADASTRO DE PRODUTOS
   EXECUTE PROCEDURE EQMOVPRODATCUSTSP(:SOPERADOR, :ICODEMPPD, :SCODFILIAL,
    :ICODMOVPROD, :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMMOVPROD); 
 */


  suspend;
end
^

/* Alter (EQMOVPRODIUDSP) */
ALTER PROCEDURE EQMOVPRODIUDSP(CIUD CHAR(1),
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
SEQSUBPROD SMALLINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable cmultialmox char(1);
begin
  /* Procedure que controle INSERT, UPDATE E DELETE da tabela eqmovprod */

  /* Linha incluida para passar como parâmetro se é multi almoxarifado
      Como o objetivo de evitar I/O
  */
  SELECT CMULTIALMOX FROM SGRETMULTIALMOXSP(:ICODEMPPD) INTO :CMULTIALMOX;
  
  if (CIUD='I') then /* SE FOR INSERT */
     execute procedure EQMOVPRODISP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod, :estoqtipomovpd);
  else if (CIUD='U') then
     execute procedure EQMOVPRODUSP( ICODEMPPD, SCODFILIALPD, ICODPROD,
         ICODEMPLE, SCODFILIALLE, CCODLOTE, ICODEMPTM, SCODFILIALTM, ICODTIPOMOV,
         ICODEMPIV, SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA,
         SCODITCOMPRA, ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         ICODEMPNT, SCODFILIALNT,
         CCODNAT, DDTMOVPROD, IDOCMOVPROD, CFLAG, NQTDMOVPROD, NPRECOMOVPROD,
         ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX,:seqsubprod, :estoqtipomovpd);
  else if (CIUD='D') then
     execute procedure EQMOVPRODDSP( ICODEMPPD, SCODFILIALPD, ICODPROD, ICODEMPIV,
         SCODFILIALIV, ICODINVPROD, ICODEMPCP, SCODFILIALCP, ICODCOMPRA, SCODITCOMPRA,
         ICODEMPVD, SCODFILIALVD, CTIPOVENDA, ICODVENDA, SCODITVENDA,
         ICODEMPRM, SCODFILIALRM, ICODRMA, SCODITRMA,
         ICODEMPOP, SCODFILIALOP, ICODOP, SSEQOP, sseqentop,
         DDTMOVPROD, ICODEMPAX, SCODFILIALAX, ICODALMOX, CMULTIALMOX, :seqsubprod );
--  suspend;
end
^

/* Alter (EQMOVPRODPRCSLDSP) */
ALTER PROCEDURE EQMOVPRODPRCSLDSP(SCODFILIAL SMALLINT,
ICODMOVPROD INTEGER,
ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
DDTMOVPROD DATE,
DDTMOVPRODPRC DATE,
NSLDMOVPROD NUMERIC(15,5),
NCUSTOMPMMOVPROD NUMERIC(15,5),
NSLDMOVPRODAX NUMERIC(15,5),
NCUSTOMPMMOVPRODAX NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1))
 RETURNS(NSLDPRC NUMERIC(15,5),
NCUSTOMPMPRC NUMERIC(15,5),
NSLDPRCAX NUMERIC(15,5),
NCUSTOMPMPRCAX NUMERIC(15,5),
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemptm integer;
declare variable scodfilialtm smallint;
declare variable icodtipomov integer;
declare variable nqtdmovprod numeric(15,5);
declare variable nprecomovprod numeric(15,5);
declare variable icodmovprodprc integer;
declare variable cestoqmovprod char(1);
declare variable icodempaxprc integer;
declare variable scodfilialaxprc smallint;
declare variable icodalmoxprc integer;
begin
  /* Procedure de processamento de estoque */
  FOR SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV ,
    MP.QTDMOVPROD, MP.PRECOMOVPROD , MP.CODMOVPROD,
    MP.CODEMPAX, MP.CODFILIALAX, MP.CODALMOX, MP.ESTOQMOVPROD
    FROM EQMOVPROD MP
    WHERE MP.CODEMPPD=:ICODEMPPD AND MP.CODFILIALPD=:SCODFILIALPD AND
       MP.CODPROD=:ICODPROD AND MP.CODEMP=:ICODEMPPD AND MP.CODFILIAL=:SCODFILIAL AND
       ( (MP.DTMOVPROD = :DDTMOVPROD AND MP.CODMOVPROD > :ICODMOVPROD) OR
         (MP.DTMOVPROD>:DDTMOVPROD) ) AND  /* ALTEREI AQUI */
       ( (:DDTMOVPRODPRC IS NULL /* AND MP.CODMOVPROD!=:ICODMOVPROD */) OR
         (MP.DTMOVPROD = :DDTMOVPRODPRC AND MP.CODMOVPROD < :ICODMOVPROD) OR
         (MP.DTMOVPROD < :DDTMOVPRODPRC) )
    ORDER BY MP.DTMOVPROD, MP.CODMOVPROD
    INTO :ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
     :NQTDMOVPROD, :NPRECOMOVPROD, :ICODMOVPRODPRC,
     :ICODEMPAXPRC, :SCODFILIALAXPRC, :ICODALMOXPRC, :ESTOQTIPOMOVPD DO
  BEGIN
      SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
        :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPROD, :NSLDMOVPROD, :ESTOQTIPOMOVPD)
      INTO :NSLDMOVPROD, :NCUSTOMPMMOVPROD, :CESTOQMOVPROD;
      if (CMULTIALMOX='N') then /* Se não for multi almoxarifado*/
      begin
         NSLDMOVPRODAX = NSLDMOVPROD;
         NCUSTOMPMMOVPRODAX = NCUSTOMPMMOVPROD;
         UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else if (ICODEMPAX=ICODEMPAXPRC AND SCODFILIALAX=SCODFILIALAXPRC AND
          ICODALMOX=ICODALMOXPRC) then
          /* Se for multi almoxarifado e o código do almoxarifado for o mesmo*/
      begin
        SELECT NSALDO, NCUSTOMPM FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
            :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMMOVPRODAX, :NSLDMOVPRODAX, :ESTOQTIPOMOVPD)
            INTO :NSLDMOVPRODAX, :NCUSTOMPMMOVPRODAX;
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            SLDMOVPRODAX=:NSLDMOVPRODAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMMOVPRODAX,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      else /* Se for multi almoxarifado não atualiza almoxarifado diferente */
      begin
        UPDATE EQMOVPROD SET SLDMOVPROD=:NSLDMOVPROD, CUSTOMPMMOVPROD=:NCUSTOMPMMOVPROD,
            ESTOQMOVPROD=:CESTOQMOVPROD
            WHERE CODEMP=:ICODEMPPD AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPRODPRC;
      end
      NSLDPRC = NSLDMOVPROD;
      NCUSTOMPMPRC = NCUSTOMPMMOVPROD;
      NSLDPRCAX = NSLDMOVPRODAX;
      NCUSTOMPMPRCAX = NCUSTOMPMMOVPRODAX;
  END
  suspend;
end
^

/* Alter (EQMOVPRODUSP) */
ALTER PROCEDURE EQMOVPRODUSP(ICODEMPPD INTEGER,
SCODFILIALPD SMALLINT,
ICODPROD INTEGER,
ICODEMPLE INTEGER,
SCODFILIALLE SMALLINT,
CCODLOTE VARCHAR(20),
ICODEMPTM INTEGER,
SCODFILIALTM SMALLINT,
ICODTIPOMOV INTEGER,
ICODEMPIV INTEGER,
SCODFILIALIV SMALLINT,
ICODINVPROD INTEGER,
ICODEMPCP INTEGER,
SCODFILIALCP SMALLINT,
ICODCOMPRA INTEGER,
SCODITCOMPRA SMALLINT,
ICODEMPVD INTEGER,
SCODFILIALVD SMALLINT,
CTIPOVENDA CHAR(1),
ICODVENDA INTEGER,
SCODITVENDA SMALLINT,
ICODEMPRM INTEGER,
SCODFILIALRM SMALLINT,
ICODRMA INTEGER,
SCODITRMA SMALLINT,
ICODEMPOP INTEGER,
SCODFILIALOP SMALLINT,
ICODOP INTEGER,
SSEQOP SMALLINT,
SSEQENTOP SMALLINT,
ICODEMPNT INTEGER,
SCODFILIALNT SMALLINT,
CCODNAT CHAR(4),
DDTMOVPROD DATE,
IDOCMOVPROD INTEGER,
CFLAG CHAR(1),
NQTDMOVPROD NUMERIC(15,5),
NPRECOMOVPROD NUMERIC(15,5),
ICODEMPAX INTEGER,
SCODFILIALAX SMALLINT,
ICODALMOX INTEGER,
CMULTIALMOX CHAR(1),
SEQSUBPROD BIGINT,
ESTOQTIPOMOVPD CHAR(1))
 AS
declare variable icodemp integer;
declare variable scodfilial smallint;
declare variable icodmovprod integer;
declare variable nsldprc numeric(15,5);
declare variable ncustompmprc numeric(15,5);
declare variable nsldprcax numeric(15,5);
declare variable ncustompmprcax numeric(15,5);
declare variable nsldlc numeric(15,5);
declare variable ncustompmlc numeric(15,5);
declare variable nsldlcax numeric(15,5);
declare variable ncustompmlcax numeric(15,5);
declare variable ddtmovprodold date;
declare variable nprecomovprodold numeric(15,5);
declare variable nqtdmovprodold numeric(15,5);
declare variable icodemptmold integer;
declare variable scodfilialtmold smallint;
declare variable icodtipomovold integer;
declare variable calttm char(1);
declare variable ddtprc date;
declare variable ddtprcate date;
declare variable cestoqmovprod char(1);
begin
  /* Procedure de atualização da tabela eqmovprod */

  DDTPRCATE = NULL; /* Até onde deve ser processando o estoque */
 /* localiza movprod */

-- execute procedure sgdebugsp('antes da atualização...','no inicio');

  SELECT ICODEMP, SCODFILIAL, ICODMOVPROD
    FROM EQMOVPRODRETCODSP(:ICODEMPIV, :SCODFILIALIV, :ICODINVPROD, :ICODEMPCP,
      :SCODFILIALCP, :ICODCOMPRA, :SCODITCOMPRA, :ICODEMPVD, :SCODFILIALVD,
      :CTIPOVENDA, :ICODVENDA, :SCODITVENDA, :ICODEMPRM, :SCODFILIALRM,
      :ICODRMA, :SCODITRMA, :ICODEMPOP, :SCODFILIALOP, :ICODOP, :SSEQOP, :sseqentop, :seqsubprod)
    INTO :ICODEMP, :SCODFILIAL, :ICODMOVPROD;

--  traz valores antigos

  SELECT MP.CODEMPTM, MP.CODFILIALTM, MP.CODTIPOMOV, MP.DTMOVPROD,
       MP.PRECOMOVPROD, MP.QTDMOVPROD  FROM EQMOVPROD MP
     WHERE MP.CODEMP=:ICODEMP AND MP.CODFILIAL=:SCODFILIAL AND MP.CODMOVPROD=:ICODMOVPROD
     INTO :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD, :DDTMOVPRODOLD,
       :NPRECOMOVPRODOLD, :NQTDMOVPRODOLD;

   /* abaixo verificação se a alteração de tipo de movimento mexe no estoque */
   SELECT CALTTM FROM EQMOVPRODCKUTMSP(:ICODEMPTM, :SCODFILIALTM, :ICODTIPOMOV,
      :ICODEMPTMOLD, :SCODFILIALTMOLD, :ICODTIPOMOVOLD) INTO :CALTTM;

   /* verifica se há relevância para reprocessamento */
   if ( (DDTMOVPROD!=DDTMOVPRODOLD) OR (CALTTM='S') OR
        (NPRECOMOVPROD!=NPRECOMOVPRODOLD) OR (NQTDMOVPROD!=NQTDMOVPRODOLD) ) then
   begin

   -- execute procedure sgdebugsp('entrou no if','1');


      if ( DDTMOVPRODOLD IS NULL) then
         DDTMOVPRODOLD = DDTMOVPROD; /* garantir que a data antiga não e nula; */
      /* verifica qual data é menor para reprocessamento */
      if ( DDTMOVPROD<=DDTMOVPRODOLD ) then
      begin

     -- execute procedure sgdebugsp('entrou no if','2');

          DDTPRC = DDTMOVPROD;
          if (DDTMOVPROD=DDTMOVPRODOLD) then
             DDTPRCATE = null;
          else
             DDTPRCATE = DDTMOVPRODOLD;
/*          verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, :NPRECOMOVPROD, :NPRECOMOVPROD,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRC, :NSLDPRC, :ESTOQTIPOMOVPD)
              INTO :NSLDPRC, :NCUSTOMPMPRC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
              NSLDPRCAX = NSLDPRC;
              NCUSTOMPMPRCAX = NCUSTOMPMPRC;
          end
          else
          begin
          SELECT NSALDO, NCUSTOMPM
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, :NQTDMOVPROD, :NPRECOMOVPROD, :NCUSTOMPMPRCAX, :NSLDPRCAX, :ESTOQTIPOMOVPD)
              INTO :NSLDPRCAX, :NCUSTOMPMPRCAX;
          end
          NCUSTOMPMLC = NCUSTOMPMPRC;
          NSLDLC = NSLDPRC;
          NCUSTOMPMLCAX = NCUSTOMPMPRCAX;
          NSLDLCAX = NSLDPRCAX;
      end
      else
      begin
          DDTPRC = DDTMOVPRODOLD;
          DDTPRCATE = DDTMOVPROD;
          /* verifica lançamento anterior e traz custo e saldo */

       --   execute procedure sgdebugsp('entrou no else','3');

          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTPRC, 0, 0,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX ;

          /* verifica lançamento anterior e traz custo e saldo */
          SELECT NSALDO, NCUSTOMPM, NSALDOAX, NCUSTOMPMAX
             FROM EQMOVPRODSLDSP(:ICODEMP, :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
             :SCODFILIALPD, :ICODPROD, :DDTMOVPROD, :NCUSTOMPMLC, :NCUSTOMPMLCAX,
             :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
             INTO :NSLDLC, :NCUSTOMPMLC, :NSLDLCAX, :NCUSTOMPMLCAX ;

          /* verifica se havera mudança de saldo */
          SELECT NSALDO, NCUSTOMPM, CESTOQMOVPROD
              FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
              :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
              :NCUSTOMPMLC, :NSLDLC, :ESTOQTIPOMOVPD)
              INTO :NSLDLC, :NCUSTOMPMLC, :CESTOQMOVPROD;
          if (CMULTIALMOX='N') then
          begin
             NSLDLCAX = NSLDLC;
             NCUSTOMPMLCAX = NCUSTOMPMLC;
          end
          else
          begin
              SELECT NSALDO, NCUSTOMPM
                  FROM EQMOVPRODCSLDSP(:ICODEMPTM, :SCODFILIALTM,
                  :ICODTIPOMOV, (:NQTDMOVPROD-:NQTDMOVPRODOLD), :NPRECOMOVPROD,
                  :NCUSTOMPMLCAX, :NSLDLCAX, :ESTOQTIPOMOVPD)
                  INTO :NSLDLCAX, :NCUSTOMPMLCAX;
          end

      end

       SELECT NSLDPRC, NCUSTOMPMPRC, NSLDPRCAX, NCUSTOMPMPRCAX
        FROM EQMOVPRODPRCSLDSP( :SCODFILIAL, :ICODMOVPROD, :ICODEMPPD,
          :SCODFILIALPD, :ICODPROD, :DDTPRC, :DDTPRCATE, :NSLDPRC,
          :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX,
          :ICODEMPAX, :SCODFILIALAX, :ICODALMOX, :CMULTIALMOX)
        INTO :NSLDPRC, :NCUSTOMPMPRC, :NSLDPRCAX, :NCUSTOMPMPRCAX;

      UPDATE EQMOVPROD SET DTMOVPROD=:DDTMOVPROD,
         QTDMOVPROD=:NQTDMOVPROD, PRECOMOVPROD=:NPRECOMOVPROD,
         SLDMOVPROD=:NSLDLC, CUSTOMPMMOVPROD=:NCUSTOMPMLC,
         SLDMOVPRODAX=:NSLDLCAX, CUSTOMPMMOVPRODAX=:NCUSTOMPMLCAX,
         FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE, ESTOQMOVPROD=:CESTOQMOVPROD ,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
   end
   else /*  caso não tenha nenhuma alteração relevânte para processamento */

  --  execute procedure sgdebugsp('antes do reprocessamento','5SG');

      UPDATE EQMOVPROD SET FLAG=:CFLAG, CODEMPNT=:ICODEMPNT, CODFILIALNT=:SCODFILIALNT,
         CODNAT=:CCODNAT, DOCMOVPROD=:IDOCMOVPROD, CODEMPTM=:ICODEMPTM,
         CODFILIALTM=:SCODFILIALTM, CODTIPOMOV=:ICODTIPOMOV, CODEMPLE=:ICODEMPLE,
         CODFILIALLE=:SCODFILIALLE, CODLOTE=:CCODLOTE,
         CODEMPAX=:ICODEMPAX, CODFILIALAX=:SCODFILIALAX, CODALMOX=:ICODALMOX
        WHERE CODEMP=:ICODEMP AND CODFILIAL=:SCODFILIAL AND CODMOVPROD=:ICODMOVPROD;
end
^

/* Alter (SGRETVERSAO) */
ALTER PROCEDURE SGRETVERSAO RETURNS(VERSAO VARCHAR(30))
 AS
begin
    versao = '1.2.5.6 (30/01/2013)';
    suspend;
end
^

SET TERM ; ^

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMP POSITION 1;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIAL POSITION 2;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODTIPOMOV POSITION 3;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPMN POSITION 4;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALMN POSITION 5;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODMODNOTA POSITION 6;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPSE POSITION 7;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALSE POSITION 8;

ALTER TABLE EQTIPOMOV ALTER COLUMN SERIE POSITION 9;

ALTER TABLE EQTIPOMOV ALTER COLUMN DESCTIPOMOV POSITION 10;

ALTER TABLE EQTIPOMOV ALTER COLUMN ESTIPOMOV POSITION 11;

ALTER TABLE EQTIPOMOV ALTER COLUMN FISCALTIPOMOV POSITION 12;

ALTER TABLE EQTIPOMOV ALTER COLUMN ESTOQTIPOMOV POSITION 13;

ALTER TABLE EQTIPOMOV ALTER COLUMN TIPOMOV POSITION 14;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPTB POSITION 15;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALTB POSITION 16;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODTAB POSITION 17;

ALTER TABLE EQTIPOMOV ALTER COLUMN ESPECIETIPOMOV POSITION 18;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPTM POSITION 19;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALTM POSITION 20;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODTIPOMOVTM POSITION 21;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPTC POSITION 22;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALTC POSITION 23;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODTIPOMOVTC POSITION 24;

ALTER TABLE EQTIPOMOV ALTER COLUMN IMPPEDTIPOMOV POSITION 25;

ALTER TABLE EQTIPOMOV ALTER COLUMN IMPNFTIPOMOV POSITION 26;

ALTER TABLE EQTIPOMOV ALTER COLUMN IMPBOLTIPOMOV POSITION 27;

ALTER TABLE EQTIPOMOV ALTER COLUMN IMPRECTIPOMOV POSITION 28;

ALTER TABLE EQTIPOMOV ALTER COLUMN REIMPNFTIPOMOV POSITION 29;

ALTER TABLE EQTIPOMOV ALTER COLUMN TUSUTIPOMOV POSITION 30;

ALTER TABLE EQTIPOMOV ALTER COLUMN SOMAVDTIPOMOV POSITION 31;

ALTER TABLE EQTIPOMOV ALTER COLUMN SEQNFTIPOMOV POSITION 32;

ALTER TABLE EQTIPOMOV ALTER COLUMN VLRMFINTIPOMOV POSITION 33;

ALTER TABLE EQTIPOMOV ALTER COLUMN MCOMISTIPOMOV POSITION 34;

ALTER TABLE EQTIPOMOV ALTER COLUMN OPERTIPOMOV POSITION 35;

ALTER TABLE EQTIPOMOV ALTER COLUMN CTIPOFRETE POSITION 36;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPRC POSITION 37;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALRC POSITION 38;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODREGRCOMIS POSITION 39;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPTN POSITION 40;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALTN POSITION 41;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODTRAN POSITION 42;

ALTER TABLE EQTIPOMOV ALTER COLUMN EMITNFCPMOV POSITION 43;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPDF POSITION 44;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALDF POSITION 45;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODMODDOCFISC POSITION 46;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPPP POSITION 47;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALPP POSITION 48;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODPLANOPAG POSITION 49;

ALTER TABLE EQTIPOMOV ALTER COLUMN DESCNATCOMPL POSITION 50;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODEMPMC POSITION 51;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODFILIALMC POSITION 52;

ALTER TABLE EQTIPOMOV ALTER COLUMN CODMENS POSITION 53;

ALTER TABLE EQTIPOMOV ALTER COLUMN DESBLOQCV POSITION 54;

ALTER TABLE EQTIPOMOV ALTER COLUMN DTINS POSITION 55;

ALTER TABLE EQTIPOMOV ALTER COLUMN HINS POSITION 56;

ALTER TABLE EQTIPOMOV ALTER COLUMN IDUSUINS POSITION 57;

ALTER TABLE EQTIPOMOV ALTER COLUMN DTALT POSITION 58;

ALTER TABLE EQTIPOMOV ALTER COLUMN HALT POSITION 59;

ALTER TABLE EQTIPOMOV ALTER COLUMN IDUSUALT POSITION 60;


COMMIT WORK;
